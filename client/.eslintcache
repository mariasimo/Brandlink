[{"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js":"1","/Users/mariasimo/SideProjects/Brandlink/client/src/App.js":"2","/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js":"3","/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js":"4","/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js":"5","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js":"6","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js":"7","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js":"8","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js":"9","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js":"10","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js":"11","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js":"12","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js":"13","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js":"14","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js":"15","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js":"16","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js":"17","/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js":"18","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js":"19","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js":"20","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js":"21","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js":"22","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js":"23","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js":"24","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js":"25","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js":"26","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js":"27","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js":"28","/Users/mariasimo/SideProjects/Brandlink/client/src/serviceWorker.js":"29","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup/Signup.js":"30","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login/Login.js":"31","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/profile/Profile.js":"32"},{"size":536,"mtime":1612306844710,"results":"33","hashOfConfig":"34"},{"size":14756,"mtime":1612306844697,"results":"35","hashOfConfig":"34"},{"size":1497,"mtime":1612306844712,"results":"36","hashOfConfig":"34"},{"size":5845,"mtime":1612306844712,"results":"37","hashOfConfig":"34"},{"size":1644,"mtime":1612306844709,"results":"38","hashOfConfig":"34"},{"size":2330,"mtime":1612306844708,"results":"39","hashOfConfig":"34"},{"size":3166,"mtime":1612306844706,"results":"40","hashOfConfig":"34"},{"size":2203,"mtime":1612306844705,"results":"41","hashOfConfig":"34"},{"size":561,"mtime":1611609614252,"results":"42","hashOfConfig":"34"},{"size":3135,"mtime":1612306844700,"results":"43","hashOfConfig":"34"},{"size":4617,"mtime":1612306844700,"results":"44","hashOfConfig":"34"},{"size":3965,"mtime":1612306844699,"results":"45","hashOfConfig":"34"},{"size":2091,"mtime":1612306844701,"results":"46","hashOfConfig":"34"},{"size":2735,"mtime":1612306844702,"results":"47","hashOfConfig":"34"},{"size":2750,"mtime":1612306844701,"results":"48","hashOfConfig":"34"},{"size":8229,"mtime":1612306844701,"results":"49","hashOfConfig":"34"},{"size":2666,"mtime":1612307386347,"results":"50","hashOfConfig":"34"},{"size":6616,"mtime":1612307386347,"results":"51","hashOfConfig":"34"},{"size":835,"mtime":1612306844702,"results":"52","hashOfConfig":"34"},{"size":1147,"mtime":1612306844704,"results":"53","hashOfConfig":"34"},{"size":907,"mtime":1612306844707,"results":"54","hashOfConfig":"34"},{"size":20981,"mtime":1612306844703,"results":"55","hashOfConfig":"34"},{"size":959,"mtime":1611609614250,"results":"56","hashOfConfig":"34"},{"size":1101,"mtime":1611609614253,"results":"57","hashOfConfig":"34"},{"size":2156,"mtime":1612306844709,"results":"58","hashOfConfig":"34"},{"size":2583,"mtime":1611609614253,"results":"59","hashOfConfig":"34"},{"size":1670,"mtime":1611609614253,"results":"60","hashOfConfig":"34"},{"size":1579,"mtime":1611609614252,"results":"61","hashOfConfig":"34"},{"size":5003,"mtime":1612306844711,"results":"62","hashOfConfig":"34"},{"size":2718,"mtime":1612306844698,"results":"63","hashOfConfig":"34"},{"size":2787,"mtime":1612306844698,"results":"64","hashOfConfig":"34"},{"size":2246,"mtime":1612306844698,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1wd42be",{"filePath":"69","messages":"70","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"68"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js",[],["148","149"],"/Users/mariasimo/SideProjects/Brandlink/client/src/App.js",["150","151","152","153","154","155","156","157","158","159","160"],"import React, { useEffect, useState } from \"react\";\n\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport Signup from \"./components/auth/Signup\";\nimport Profile from \"./components/auth/Profile\";\nimport Login from \"./components/auth/Login\";\n\nimport ProjectList from \"./components/project/ProjectList\";\nimport PrivateRoute from \"./guards/PrivateRoute\";\nimport { LandingPage } from \"./components/landingPage/LandingPage\";\nimport Navbar from \"./components/layout/Navbar\";\nimport NewProject from \"./components/project/NewProject\";\nimport EditProject from \"./components/project/EditProject\";\nimport ColorPalette from \"./components/brandPresets/ColorPalette\";\nimport NewColor from \"./components/brandPresets/NewColor\";\nimport TypeSet from \"./components/brandPresets/TypeSet\";\nimport NewType from \"./components/brandPresets/NewType\";\nimport ProjectService from \"./services/ProjectService\";\nimport Assets from \"./components/brandPresets/Assets\";\nimport TextStyles from \"./components/brandPresets/TextStyles\";\nimport NewTextStyle from \"./components/brandPresets/NewTextStyle\";\nimport { useUserState } from \"./context/UserContext\";\nimport { useProjectsState } from \"./context/ProjectContext\";\n\nconst App = (props) => {\n  const { user } = useUserState();\n  const { currentProject } = useProjectsState();\n\n  // move this into a UIContext??\n  const [menuIsOpen, setMenuIsOpen] = useState(\"show\");\n  const toggleMenu = () =>\n    setMenuIsOpen(menuIsOpen === \"show\" ? \"hide\" : \"show\");\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/login\" render={(match) => <Login {...match} />} />\n        <Route exact path=\"/signup\" render={(match) => <Signup {...match} />} />\n        <Route exact path=\"/\" component={LandingPage} />\n        <PrivateRoute\n          exact\n          path=\"/panel/:username\"\n          redirectPath=\"/login\"\n          component={ProjectList}\n        />\n        <PrivateRoute\n          exact\n          path=\"/profile/:username\"\n          user={user}\n          redirectPath=\"/login\"\n          component={Profile}\n        />\n        <PrivateRoute\n          exact\n          path=\"/project/new\"\n          component={NewProject}\n          username={user?.username}\n          toggleMenu={toggleMenu}\n          menuIsOpen={menuIsOpen}\n        />\n        <PrivateRoute\n          path=\"/:id/project/:path\"\n          component={EditProject}\n          {...props}\n        />\n      </Switch>\n\n      {/* <Switch>\n        <Route exact path=\"/login\" render={(match) => <Login {...match} />} />\n        <Route exact path=\"/signup\" render={(match) => <Signup {...match} />} />\n        <Route exact path=\"/\" component={LandingPage} />\n        <PrivateRoute\n          exact\n          path=\"/panel/:username\"\n          redirectPath=\"/login\"\n          component={ProjectList}\n        />\n        <PrivateRoute\n          exact\n          path=\"/profile/:username\"\n          user={user}\n          redirectPath=\"/login\"\n          component={Profile}\n        />\n        <PrivateRoute\n          exact\n          path=\"/project/new\"\n          component={NewProject}\n          username={user?.username}\n          toggleMenu={toggleMenu}\n          menuIsOpen={menuIsOpen}\n        />\n        <Route\n          exact\n          path=\"/:id/project/:path/\"\n          user={user}\n          toggleMenu={toggleMenu}\n          menuIsOpen={menuIsOpen}\n          component={EditProject}\n          username={user?.username}\n          {...props}\n        />\n      </Switch> */}\n\n      {/* {user?.id && (\n        <Switch>\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/colorPalette\"\n            user={user}\n            activeProject={user.activeProject}\n            toggleMenu={toggleMenu}\n            menuIsOpen={menuIsOpen}\n            // colorPalette={colorPalette}\n            // // deleteColor={deleteColor}\n            // typeset={typeset}\n            // assets={assets}\n            // textstyles={textstyles}\n            component={ColorPalette}\n          />\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/colorPalette/new/:colorId?\"\n            user={user}\n            toggleMenu={toggleMenu}\n            menuIsOpen={menuIsOpen}\n            // colorPalette={colorPalette}\n            // // addColorToPalette={addColorToPalette}\n            // typeset={typeset}\n            // assets={assets}\n            // textstyles={textstyles}\n            component={NewColor}\n          />\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/typeset\"\n            user={user}\n            toggleMenu={toggleMenu}\n            menuIsOpen={menuIsOpen}\n            // colorPalette={colorPalette}\n            // // deleteType={deleteType}\n            // assets={assets}\n            // typeset={typeset}\n            // textstyles={textstyles}\n            component={TypeSet}\n          />\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/typeset/new/:source?\"\n            user={user}\n            toggleMenu={toggleMenu}\n            // colorPalette={colorPalette}\n            menuIsOpen={menuIsOpen}\n            // typeset={typeset}\n            // saveType={saveType}\n            // assets={assets}\n            // textstyles={textstyles}\n            component={NewType}\n          />\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/assets\"\n            user={user}\n            toggleMenu={toggleMenu}\n            menuIsOpen={menuIsOpen}\n            // colorPalette={colorPalette}\n            // typeset={typeset}\n            // assets={assets}\n            // // addAsset={addAsset}\n            // // deleteAsset={deleteAsset}\n            // // onDragStart={onDragStart}\n            // // onDrop={onDrop}\n            // file={file}\n            // textstyles={textstyles}\n            component={Assets}\n          />\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/textStyles\"\n            user={user}\n            toggleMenu={toggleMenu}\n            menuIsOpen={menuIsOpen}\n            // colorPalette={colorPalette}\n            // typeset={typeset}\n            // assets={assets}\n            // textstyles={textstyles}\n            component={TextStyles}\n          />\n          <PrivateRoute\n            exact\n            path=\"/project/:id/edit/textStyles/new/:styleId?\"\n            user={user}\n            toggleMenu={toggleMenu}\n            menuIsOpen={menuIsOpen}\n            // colorPalette={colorPalette}\n            // typeset={typeset}\n            // assets={assets}\n            // textstyles={textstyles}\n            // addTextStyle={addTextStyle}\n            component={NewTextStyle}\n        </Switch>\n          /> */}\n    </div>\n  );\n};\n\nexport default App;\n\n// const addFontsLinks = (typeset) => {\n//   typeset.map((type) => {\n//     const link = document.createElement(\"link\");\n//     link.setAttribute(\n//       \"href\",\n//       `https://fonts.googleapis.com/css?family=${type.fontFamily.replace(\n//         \" \",\n//         \"+\"\n//       )}&display=swap`\n//     );\n//     link.setAttribute(\"rel\", `stylesheet`);\n//     return document.head.appendChild(link);\n//   });\n// };\n\n// const deleteProject = (projectId) => {\n//   projectService.deleteProject(projectId).then(\n//     (response) => {\n//       //Esto aqui pa què\n//       // setUser(user);\n//     },\n//     (error) => {\n//       console.error(error.message);\n//     }\n//   );\n// };\n\n// const addColorToPalette = ({ name, hexadecimal, id, colorId, history }) => {\n//   projectService.addColorToPalette({ name, hexadecimal, id, colorId }).then(\n//     (updatedProject) => {\n//       // aquí parece que se guardan los datos de la paleta en el estado, pero no tiene que ver con el active project\n\n//       setProject({ ...project, colorPalette: updatedProject.colorPalette });\n//       // setState({\n//       //   ...this.state,\n//       //   name: '',\n//       //   hexadecimal: '',\n//       //   colorPalette: updatedProject.colorPalette\n//       // });\n//       history.push(`/project/${id}/edit/colorPalette`, {\n//         state: this.state.colorPalette,\n//       });\n//     },\n//     (error) => console.error(error)\n//   );\n// };\n\n// const deleteColor = (colorId) => {\n//   projectService.deleteColor(colorId).then(\n//     (project) => {\n//       // otra vez setear el usuario pa qué\n//       // this.setUser(user);\n//     },\n//     (error) => console.error(error.message)\n//   );\n// };\n\n// const saveType = ({ fontFamily, type, path, history }) => {\n//   projectService.addTypeToTypeSet({ fontFamily, type, path }).then(\n//     (updatedProject) => {\n//       // setea la nueva tipografia\n\n//       // setState({\n//       //   ...this.state,\n//       //   fontFamily: '',\n//       //   typeset: updatedProject.typeset\n//       // });\n//       history.push(`/project/${user.activeProject}/edit/typeSet`);\n//     },\n//     (error) => console.error(error)\n//   );\n// };\n\n// const deleteType = (typeId) => {\n//   projectService.deleteType(typeId).then(\n//     (project) => {\n//       // this.setUser(user);\n//     },\n//     (error) => console.log(error.message)\n//   );\n// };\n\n// const addTextStyle = ({ textstyle, path, styleId, history }) => {\n//   projectService.addTextStyle({ ...textstyle, path, styleId, history }).then(\n//     () => {\n//       // tampoco tengo ni idea de cómo se articula esta parte del estado\n\n//       // this.setState({\n//       //   ...this.state,\n//       //   name: '',\n//       //   fontFamily: '',\n//       //   fontSize: 1,\n//       //   fontWeight: null,\n//       //   lineHeight: 1,\n//       //   letterSpacing: 0,\n//       //   uppercase: false\n//       // });\n//       history.push(`/project/${user.activeProject}/edit/textStyles`);\n//     },\n//     (error) => console.error(error)\n//   );\n// };\n\n// const addAsset = ({ uploadData, path }) => {\n//   // Esto puede suceder en el scope local y sacarlo del estado???\n//   const loadingImg = document.createElement(\"img\");\n//   loadingImg.setAttribute(\"src\", \"http://localhost:3000/loading.svg\");\n//   const loadingParent = document.querySelector(\".file-label\");\n//   loadingParent.appendChild(this.loadingImg);\n\n//   projectService\n//     .uploadAsset({ uploadData, path })\n//     .then(() => {\n//       // this.setUser(user);\n//       loadingParent.removeChild(loadingImg);\n//     })\n//     .catch((error) => console.log(error));\n// };\n\n// const deleteAsset = (assetId) => {\n//   projectService.deleteAsset(assetId).then(\n//     (project) => {\n//       // this.setUser(user);\n//     },\n//     (error) => {\n//       const { message } = error;\n//       console.error(message);\n//     }\n//   );\n// };\n\n// const onDragStart = (ev, id) => {\n//   console.log(\"dragstart:\", id);\n//   ev.dataTransfer.setData(\"id\", id);\n// };\n\n// const onDrop = (ev, slotIdx) => {\n//   let fileId = ev.dataTransfer.getData(\"id\");\n//   setFile(fileId);\n// };\n\n// const createProject = ({ title, path, history }) => {\n//   projectService.createProject({ title, path }).then(\n//     (projectCreated) => {\n//       // esto es para limpiar algo??\n//       // this.setState({ ...this.state, title: '', path: '' });\n\n//       history.push(`/panel/${user.username}`);\n//     },\n//     (error) => console.error(error)\n//   );\n// };\n\n// const shareMessage = ({ email, projectId }) => {\n//   projectService.shareMessage({ email, projectId }).then((response) => {\n//     if (response.msg === \"success\") {\n//       alert(\"Message Sent.\");\n//       this.resetForm();\n//     } else if (response.msg === \"fail\") {\n//       alert(\"Message failed to send.\");\n//     }\n//   });\n// };\n\n// const resetForm = () => document.getElementById(\"contact-form\").reset();\n","/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js",["161"],"import React from \"react\";\nimport { Route, Redirect, useRouteMatch } from \"react-router-dom\";\nimport { useUserState } from \"../context/UserContext\";\n\n// const PrivateRoute = ({ component: Component, ...rest }) => {\n//   const { user } = useUserState();\n//   let { path, url } = useRouteMatch();\n\n//   console.log(path, url, Component, rest);\n\n//   return (\n//     <Route\n//       {...rest}\n//       render={(props) => {\n//         return user?.id ? (\n//           <Component {...props} {...rest} />\n//         ) : (\n//           <Redirect to={rest.redirectPath} />\n//         );\n//       }}\n//     />\n//   );\n// };\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const { user } = useUserState();\n  const isAuthenticated = user?.id;\n  if (isAuthenticated) {\n    return <Route {...rest} render={(props) => <Component {...props} />} />;\n  }\n\n  return <Redirect to={rest.redirectPath} />;\n};\n\nexport default PrivateRoute;\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js",["162"],"import React, { useEffect, useState } from \"react\";\nimport SideMenu from \"../layout/SideMenu\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport useSetState from \"../../hooks/useSetState\";\nimport { useUserActions, useUserState } from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\";\nimport { hyphenString } from \"../../utils\";\n\nconst initialState = {\n  title: \"\",\n  path: \"\",\n};\n\nconst NewProject = ({ username, toggleMenu, menuIsOpen }) => {\n  const [newProject, setNewProject] = useSetState(initialState);\n  const { addNewProjectToUser } = useUserActions();\n  const {\n    user: { projects },\n    loading,\n    error,\n  } = useUserState();\n  const [numberOfProjects, setNumberOfProjects] = useState();\n  const history = useHistory();\n\n  useEffect(() => setNumberOfProjects(projects.length), []);\n  useEffect(() => {\n    if (projects.length > numberOfProjects && !error) {\n      history.push(`/panel/${username}`);\n    }\n  }, [numberOfProjects, projects.length, error, history, username]);\n\n  const handleBlur = (e) => {\n    let pathSuggestion = hyphenString(e.target.value);\n    setNewProject({ ...setNewProject, path: pathSuggestion });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setNewProject({ ...newProject, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addNewProjectToUser(newProject);\n  };\n\n  const { title, path } = newProject;\n\n  return (\n    <div class=\"new-project-section\">\n      <SideMenu toggleMenu={toggleMenu} menuIsOpen={menuIsOpen}>\n        <BrandHeader title=\"New Project\" url={`/panel/${username}`} />\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"field\">\n            <label htmlFor=\"title\" className=\"label\">\n              Title:\n            </label>\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                name=\"title\"\n                className=\"input\"\n                value={title}\n                placeholder=\"Introduce the title for your project\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label htmlFor=\"path\" className=\"label\">\n              Path:\n            </label>\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                name=\"path\"\n                className=\"input\"\n                value={path}\n                placeholder=\"Introduce the url for your project\"\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <input\n              type=\"submit\"\n              className=\"button is-link is-rounded\"\n              value=\"Start project\"\n            ></input>\n          </div>\n          {error && error}\n          {loading && \"loading\"}\n        </form>\n      </SideMenu>\n\n      <div\n        className={`main-content section ${menuIsOpen} new-project-main is-paddingless`}\n      >\n        <section className=\"section rows-container is-paddingless\t\">\n          <img src=\"/new-project.png\" alt=\"New Project\" />\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default NewProject;\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js",["163"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport BrandHeader from '../layout/BrandHeader';\nimport SideMenu from '../layout/SideMenu';\n// import ProjectService from \"../../services/ProjectService\";\nimport MainContent from '../layout/MainContent';\n\nexport default class EditProject extends Component {\n\n  render() {\n    const { colorPalette, typeset, assets} = this.props;\n    return (\n      < >\n      <SideMenu\n                {...this.props}\n\n      toggleMenu={this.props.toggleMenu}\n      menuIsOpen={this.props.menuIsOpen}\n      projectId={this.props.loggedInUser.activeProject}\n      shareMessage={this.props.shareMessage}\n      permissionToShare\n      >   \n        <BrandHeader\n          title={this.props.projectTitle}\n          subtitle='Brand presets'\n          {...this.props}\n          url={`/panel/${this.props.loggedInUser.username}`}\n        ></BrandHeader>\n\n        <p>Let's begin! Start by adding some brand presets to your project</p>\n\n        <ul className='project-presets-list'>\n          <li>\n            <Link to={`${this.props.location.pathname}/typeset`}>\n              <h3 className='is-size-5 has-text-primary'>Typography</h3>\n            </Link>\n          </li>\n          <li>\n            <Link to={`${this.props.location.pathname}/textStyles`}>\n              <h3 className='is-size-5 has-text-primary'>Text Styles</h3>\n            </Link>\n          </li>\n          <li>\n            <Link to={`${this.props.location.pathname}/colorPalette`}>\n              <h3 className='is-size-5 has-text-primary'>Color Palette</h3>\n            </Link>\n          </li>\n          <li>\n            <Link to={`${this.props.location.pathname}/assets`}>\n              <h3 className='is-size-5 has-text-primary'>Assets</h3>\n            </Link>\n          </li>\n        </ul>\n      </SideMenu>\n      <MainContent \n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          user={this.props.loggedInUser}\n          assets={assets}\n          permissionToEdit\n        >\n          \n        </MainContent>\n        </ >\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js",["164","165","166","167","168","169"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\n\nconst ColorPalette = () => {\n  console.log(\"color palette\");\n  return \"color palette\";\n};\n\nexport default ColorPalette;\n\n// export default class ColorPalette extends Component {\n//   constructor(props) {\n//     super(props);\n//     // this.authService = new AuthService();\n//     this.projectService = () => {};\n//     this.state = {\n//       path: \"\",\n//       title: \"\",\n//       colorPalette: null,\n//     };\n//   }\n\n//   render() {\n//     const { id } = this.props.match.params;\n//     const { colorPalette, typeset, assets } = this.props;\n\n//     return (\n//       <>\n//         <SideMenu\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//         >\n//           <BrandHeader\n//             title=\"Color Palette\"\n//             {...this.props}\n//             url={`/project/${id}/edit`}\n//           ></BrandHeader>\n\n//           <div className=\"content\">\n//             <div className=\"color-palette columns is-multiline\">\n//               {colorPalette &&\n//                 colorPalette.map((color) => (\n//                   <div className=\"column is-full box\" key={color._id}>\n//                     <div className=\"color\">\n//                       <div\n//                         className=\"circle-color\"\n//                         style={{ backgroundColor: color.hexadecimal }}\n//                       ></div>\n//                       <span>{color.name}</span>\n//                     </div>\n//                     <div className=\"is-grouped\">\n//                       <Link\n//                         to={`/project/${id}/edit/colorPalette/new/${color._id}`}\n//                         className=\"button is-rounded is-small is-success is-outlined\"\n//                       >\n//                         Edit\n//                       </Link>\n//                       <button\n//                         onClick={() => this.props.deleteColor(color._id)}\n//                         className=\"button is-rounded is-small is-danger is-outlined\"\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))}\n\n//               {!colorPalette ||\n//                 (!colorPalette.length && (\n//                   <div>\n//                     You dont have any color swatch yet. Add your first now.\n//                   </div>\n//                 ))}\n//             </div>\n\n//             <div className=\"control\">\n//               <Link\n//                 to={`/project/${id}/edit/colorPalette/new`}\n//                 className=\"button is-link\"\n//               >\n//                 Add new color\n//               </Link>\n//             </div>\n//           </div>\n//         </SideMenu>\n//         <MainContent\n//           {...this.props}\n//           colorPalette={colorPalette}\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//           user={this.props.loggedInUser}\n//           typeset={typeset}\n//           assets={assets}\n//           permissionToEdit\n//         ></MainContent>\n//       </>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js",["170","171"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\nimport { TwitterPicker } from \"react-color\";\n\nexport default class NewColor extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = () => {};\n\n    this.state = {\n      name: \"\",\n      hexadecimal: \"\",\n      colorPalette: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getColorData();\n  }\n\n  getColorData = () => {\n    const { colorId } = this.props.match.params;\n\n    if (colorId !== undefined) {\n      this.projectService.getColorData(colorId).then(\n        (colorData) => {\n          let color = colorData.colorPalette.filter(\n            (color) => color._id === colorId\n          );\n          this.setState({\n            ...this.state,\n            name: color[0].name,\n            hexadecimal: color[0].hexadecimal,\n          });\n        },\n        (error) => {\n          const { message } = error;\n          console.error(message);\n        }\n      );\n    }\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ ...this.state, [name]: value });\n  };\n\n  handleChangeComplete = (color) => {\n    this.setState({ hexadecimal: color.hex });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, hexadecimal } = this.state;\n    const { id, colorId } = this.props.match.params;\n    const { history } = this.props;\n    this.props.addColorToPalette({ name, hexadecimal, id, colorId, history });\n  };\n\n  render() {\n    const { name, hexadecimal } = this.state;\n    const { colorId, id } = this.props.match.params;\n    const { colorPalette, typeset, assets } = this.props;\n\n    return (\n      <>\n        <SideMenu\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n        >\n          {colorId && (\n            <BrandHeader\n              title=\"Edit color\"\n              subtitle=\"Color Palette\"\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n          {!colorId && (\n            <BrandHeader\n              title=\"New color\"\n              subtitle=\"Color Palette\"\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label htmlFor=\"title\" className=\"label\">\n                Name:\n              </label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  className=\"input\"\n                  value={name}\n                  placeholder=\"Introduce a name for your color\"\n                  onChange={this.handleChange}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"path\" className=\"label\">\n                Hexadecimal:\n              </label>\n              <div className=\"control\">\n                {/* <input\n                type=\"text\"\n                name=\"hexadecimal\"\n                className=\"input\"\n                value={hexadecimal}\n                placeholder=\"Introduce the url for your project\"\n                onChange={this.handleChange}\n                required\n              /> */}\n                <TwitterPicker\n                  color={this.state.background}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </div>\n            </div>\n\n            <div className=\"control\">\n              {!colorId && (\n                <input\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  value=\"Save Color\"\n                ></input>\n              )}\n\n              {colorId && (\n                <input\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  value=\"Edit Color\"\n                ></input>\n              )}\n            </div>\n          </form>\n        </SideMenu>\n        <MainContent\n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          user={this.props.loggedInUser}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          assets={assets}\n          permissionToEdit\n        ></MainContent>\n      </>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js",["172","173","174","175","176","177"],"import React, { Component } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\n\nconst Assets = () => {\n  console.log(\"assets\");\n  return \"assets\";\n};\n\nexport default Assets;\n\n// export default class Assets extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.projectService = () => {};\n//     this.state = {\n//       path: \"\",\n//       title: \"\",\n//       assets: null,\n//     };\n//   }\n\n//   handleUpload = (file) => {\n//     const uploadData = new FormData();\n//     uploadData.append(\"file\", file[0]);\n//     const { path } = this.props.match.params;\n\n//     this.props.addAsset({ uploadData, path });\n//   };\n\n//   render() {\n//     const { id } = this.props.match.params;\n//     const { colorPalette, typeset, assets } = this.props;\n\n//     return (\n//       <React.Fragment>\n//         <SideMenu\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//         >\n//           <BrandHeader\n//             title=\"Assets Library\"\n//             {...this.props}\n//             url={`/project/${id}/edit`}\n//           ></BrandHeader>\n\n//           <div>\n//             <Dropzone\n//               onDrop={(acceptedFiles) => this.handleUpload(acceptedFiles)}\n//             >\n//               {({ getRootProps, getInputProps }) => (\n//                 <section class=\"file-label\">\n//                   <div {...getRootProps()}>\n//                     <input {...getInputProps()} />\n//                     <p>\n//                       Drag 'n' drop some files here, or click to select files\n//                     </p>\n//                   </div>\n//                 </section>\n//               )}\n//             </Dropzone>\n//             <p>File formats allowed: .png, .jpg, .pdf, .zip, .svg, .gif</p>\n\n//             <div className=\"assets-list columns is-multiline\">\n//               {assets &&\n//                 assets.map((asset) => (\n//                   <div\n//                     key={asset._id}\n//                     draggable\n//                     className=\"draggable\"\n//                     onDragStart={(e) => this.props.onDragStart(e, asset._id)}\n//                     onDrop={(e) => this.props.onDrop(e, asset._id)}\n//                   >\n//                     <figure className=\"column is-half\">\n//                       <button\n//                         onClick={() => this.props.deleteAsset(asset._id)}\n//                         className=\"button is-rounded is-small is-danger is-outlined\"\n//                       >\n//                         Delete\n//                       </button>\n//                       {(asset.format === \"png\" ||\n//                         asset.format === \"jpg\" ||\n//                         asset.format === \"svg\" ||\n//                         asset.format === \"gif\") && (\n//                         <span>\n//                           <img src={asset.secure_url} alt=\"\" />\n//                         </span>\n//                       )}\n//                       {asset.format === \"pdf\" && <p>esto es un pdf</p>}\n//                       {asset.format === \"zip\" && (\n//                         <p className=\"box\">esto es un zip</p>\n//                       )}\n//                     </figure>\n//                     {/* <div className=\"asset-name\" onClick={this.editName}>\n//                         <a>{asset.name}</a>\n//                         <input style={{display: 'none'}} type=\"text\" value={asset.name} onChange={this.editInputName(asset._id)}/>\n//                       </div> */}\n//                   </div>\n//                 ))}\n\n//               {!assets && <div>You dont have any assets yet</div>}\n//             </div>\n//           </div>\n//         </SideMenu>\n//         <MainContent\n//           {...this.props}\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//           user={this.props.loggedInUser}\n//           colorPalette={colorPalette}\n//           typeset={typeset}\n//           assets={assets}\n//           onDragStart={this.props.onDragStart}\n//           permissionToEdit\n//         ></MainContent>\n//       </React.Fragment>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js",["178"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\nimport MyFontPicker from \"../utils/MyFontPicker\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport AdobeFontsImporter from \"../utils/AdobeFontsImporter\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\n\nexport default class NewType extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = () => {};\n  }\n\n  saveType = (typeObj) => {\n    const { fontFamily, type } = typeObj;\n    const { path } = this.props.match.params;\n    const { history } = this.props;\n\n    this.props.saveType({ fontFamily, type, path, history });\n  };\n\n  render() {\n    const { source, id } = this.props.match.params;\n    const { colorPalette, typeset, assets } = this.props;\n\n    return (\n      <>\n        <SideMenu\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n        >\n          <div className=\"content\">\n            {source === \"google-font\" && (\n              <>\n                <BrandHeader\n                  title=\"Google Fonts\"\n                  subtitle=\"Typeset\"\n                  {...this.props}\n                  url={`/project/${id}/edit/typeset`}\n                ></BrandHeader>\n                <MyFontPicker\n                  class=\"select\"\n                  saveType={(typeObj) => this.saveType(typeObj)}\n                />\n              </>\n            )}\n\n            {source === \"adobe-font\" && (\n              <>\n                <BrandHeader\n                  title=\"Adobe Fonts\"\n                  subtitle=\"Typeset\"\n                  {...this.props}\n                  url={`/project/${id}/edit/typeset`}\n                ></BrandHeader>\n                <AdobeFontsImporter></AdobeFontsImporter>\n              </>\n            )}\n          </div>\n        </SideMenu>\n        <MainContent\n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          user={this.props.loggedInUser}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          assets={assets}\n          permissionToEdit\n        ></MainContent>\n      </>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js",["179","180","181","182","183","184","185"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ProjectService from \"../../services/ProjectService\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\n\nconst TypeSet = () => {\n  console.log(\"typeset\");\n  return \"typeset\";\n};\n\nexport default TypeSet;\n\n// export default class TypeSet extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.projectService = () => {};\n//     this.state = {\n//       path: \"\",\n//       title: \"\",\n//       typeset: null,\n//     };\n//   }\n\n//   render() {\n//     const { id } = this.props.match.params;\n//     const { colorPalette, typeset, assets } = this.props;\n\n//     return (\n//       <>\n//         <SideMenu\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//         >\n//           <BrandHeader\n//             title=\"Typography set\"\n//             {...this.props}\n//             url={`/project/${id}/edit`}\n//           ></BrandHeader>\n\n//           <div className=\"type-set\">\n//             <div className=\"content\">\n//               {typeset &&\n//                 typeset.map((font) => (\n//                   <div className=\"box\" key={font._id}>\n//                     <span style={{ fontFamily: font.fontFamily }}>\n//                       {font.fontFamily}\n//                     </span>\n//                     <button\n//                       onClick={() => this.props.deleteType(font._id)}\n//                       className=\"button is-rounded is-small is-danger is-outlined\"\n//                     >\n//                       Delete\n//                     </button>\n//                   </div>\n//                 ))}\n//               {(!typeset || !typeset.length) && (\n//                 <div>You dont have any fonts yet. Add your first font now.</div>\n//               )}\n//             </div>\n\n//             <div className=\"field fonts-buttons is-group\">\n//               <div className=\"google-fonts-button control\">\n//                 <Link\n//                   to={`/project/${id}/edit/typeSet/new/google-font?`}\n//                   className=\"button is-link\"\n//                 >\n//                   Add Google Font\n//                 </Link>\n//               </div>\n\n//               <div className=\"adobe-fonts-button control\">\n//                 <Link\n//                   to={`/project/${id}/edit/typeSet/new/adobe-font?`}\n//                   className=\"button is-link\"\n//                 >\n//                   Add Adobe Font\n//                 </Link>\n//               </div>\n//             </div>\n//           </div>\n//         </SideMenu>\n//         <MainContent\n//           {...this.props}\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//           colorPalette={colorPalette}\n//           typeset={typeset}\n//           user={this.props.loggedInUser}\n//           assets={assets}\n//           permissionToEdit\n//         ></MainContent>\n//       </>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js",["186","187","188","189","190","191","192"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ProjectService from \"../../services/ProjectService\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\n\nconst TextStyles = () => {\n  console.log(\"textstyles\");\n  return \"textstyles\";\n};\n\nexport default TextStyles;\n\n// export default class TextStyles extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.projectService = () => {};\n//     this.state = {\n//       path: \"\",\n//       title: \"\",\n//       typeset: [],\n//       textstyles: [],\n//     };\n//   }\n\n//   render() {\n//     const { id } = this.props.match.params;\n//     const { colorPalette, typeset, assets, textstyles } = this.props;\n\n//     return (\n//       <>\n//         <SideMenu\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//         >\n//           <BrandHeader\n//             title=\"Text Styles\"\n//             {...this.props}\n//             url={`/project/${id}/edit`}\n//           ></BrandHeader>\n\n//           <div className=\"content\">\n//             <div className=\"type-set columns is-multiline\">\n//               {textstyles && <p>This are some default styles you cant edit</p>}\n//               {textstyles &&\n//                 textstyles.map((style) => (\n//                   <div className=\"column is-full box\" key={style._id}>\n//                     <div className=\"element\">\n//                       <span\n//                         style={{\n//                           fontFamily: style.fontFamily,\n//                           fontWeight: style.fontWeight,\n//                           fontSize: `${style.fontSize}rem`,\n//                           letterSpacing: `${style.letterSpacing}rem`,\n//                           lineHeight: style.lineHeight,\n//                         }}\n//                       >\n//                         {style.name}\n//                       </span>\n//                     </div>\n//                     <div className=\"is-grouped\">\n//                       <Link\n//                         to={{\n//                           pathname: `${this.props.location.pathname}/new/${style._id}`,\n//                           state: this.state,\n//                         }}\n//                         className=\"button is-rounded is-small is-success is-outlined\"\n//                       >\n//                         Edit\n//                       </Link>\n//                     </div>\n//                   </div>\n//                 ))}\n\n//               {!textstyles && <div>You dont have any text styles yet</div>}\n//             </div>\n//           </div>\n//         </SideMenu>\n//         <MainContent\n//           {...this.props}\n//           toggleMenu={this.props.toggleMenu}\n//           menuIsOpen={this.props.menuIsOpen}\n//           user={this.props.loggedInUser}\n//           colorPalette={colorPalette}\n//           typeset={typeset}\n//           assets={assets}\n//           permissionToEdit\n//         ></MainContent>\n//       </>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js",["193"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\n\nexport default class NewTextStyle extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = () => {};\n\n    this.state = {\n      textstyle: {},\n      typeset: [],\n    };\n\n    this.uppercaseValue = \"none\";\n  }\n\n  componentDidMount() {\n    this.getTextStyleData();\n  }\n\n  getTextStyleData = () => {\n    const { styleId } = this.props.match.params;\n\n    if (styleId !== undefined) {\n      this.projectService.getTextStyleData(styleId).then(\n        (textstyleData) => {\n          let textStyle = textstyleData.textstyles.filter(\n            (style) => style._id === styleId\n          );\n\n          this.setState({\n            ...this.state,\n            textstyle: textStyle[0],\n            typeset: textstyleData.typeset,\n          });\n        },\n        (error) => {\n          const { message } = error;\n          console.error(message);\n        }\n      );\n    }\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      ...this.state,\n      textstyle: { ...this.state.textstyle, [name]: value },\n    });\n  };\n\n  handleCheckbox = (e) => {\n    let uppercase = !this.state.uppercase;\n    this.setState({ ...this.state, uppercase: uppercase });\n    this.uppercaseValue = !this.state.uppercase ? \"uppercase\" : \"none\";\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { path, styleId } = this.props.match.params;\n    const { history } = this.props;\n    const textstyle = this.state.textstyle;\n    this.props.addTextStyle({ textstyle, path, styleId, history });\n  };\n\n  render() {\n    const { id } = this.props.match.params;\n    const {\n      name,\n      fontFamily,\n      fontSize,\n      fontWeight,\n      lineHeight,\n      letterSpacing,\n    } = this.state.textstyle;\n    const { colorPalette, typeset, assets } = this.props;\n\n    return (\n      <>\n        <SideMenu\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n        >\n          <BrandHeader\n            title={name}\n            subtitle=\"Text Styles\"\n            {...this.props}\n            url={`/project/${id}/edit/textStyles`}\n          ></BrandHeader>\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label htmlFor=\"fontFamily\" className=\"label\">\n                Font Family:\n              </label>\n              <div className=\"control\">\n                {typeset && (\n                  <select\n                    className=\"select large\"\n                    name=\"fontFamily\"\n                    value={fontFamily}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"Select font family\">\n                      Select a font family\n                    </option>\n                    {typeset.map((font, idx) => {\n                      return (\n                        <option key={idx} value={font.fontFamily}>\n                          {font.fontFamily}\n                        </option>\n                      );\n                    })}\n                  </select>\n                )}\n\n                {!typeset && (\n                  <p>You haven't add any font to TypeSet yet. Go now</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"fontWeight\" className=\"label\">\n                Font Weight:\n              </label>\n              <div className=\"control\">\n                <select\n                  className=\"select large\"\n                  name=\"fontWeight\"\n                  value={fontWeight}\n                  onChange={this.handleChange}\n                >\n                  <option value=\"100\">Light</option>\n                  <option value=\"400\">Regular</option>\n                  <option value=\"500\">Semibold</option>\n                  <option value=\"600\">Bold</option>\n                  <option value=\"800\">Black</option>\n                </select>\n\n                {/* for this to work right i will new to now what font family is\n                    going to be in user, and retrieve the weights avaibable for it from Google\n                    Fonts or Adobe Fonts (or custom source, if i get to implement that) */}\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"fontSize\" className=\"label\">\n                Font Size:\n              </label>\n              <div className=\"control\">\n                <input\n                  type=\"range\"\n                  name=\"fontSize\"\n                  min=\"1\"\n                  max=\"12\"\n                  step=\"0.25\"\n                  value={fontSize}\n                  onChange={this.handleChange}\n                />\n                <span>{fontSize} rem</span>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"lineHeight\" className=\"label\">\n                Line Height:\n              </label>\n              <div className=\"control\">\n                <input\n                  type=\"range\"\n                  name=\"lineHeight\"\n                  value={lineHeight}\n                  onChange={this.handleChange}\n                  min=\"0\"\n                  max=\"2\"\n                  step=\"0.1\"\n                />\n                <span>{lineHeight}</span>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"letterSpacing\" className=\"label\">\n                Letter Spacing\n              </label>\n              <div className=\"control\">\n                <input\n                  type=\"range\"\n                  name=\"letterSpacing\"\n                  min=\"-0.25\"\n                  max=\"0.25\"\n                  step=\"0.1\"\n                  value={letterSpacing}\n                  onChange={this.handleChange}\n                />\n                <span>{letterSpacing} rem</span>\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  type=\"checkbox\"\n                  name=\"uppercase\"\n                  onChange={this.handleCheckbox}\n                />\n                <span>Text to uppercase</span>\n              </div>\n            </div>\n\n            <div className=\"preview-text box\">\n              <p\n                style={{\n                  fontFamily,\n                  fontSize: `${fontSize}rem`,\n                  fontWeight,\n                  lineHeight,\n                  letterSpacing: `${letterSpacing}rem`,\n                  textTransform: this.uppercaseValue,\n                }}\n              >\n                Lorem ipsum dolor sit amet consecteteur adipiscing elit\n              </p>\n            </div>\n\n            <div className=\"control\">\n              <input\n                type=\"submit\"\n                className=\"button is-link\"\n                value=\"Save Text Style\"\n              ></input>\n            </div>\n          </form>\n        </SideMenu>\n        <MainContent\n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          path={this.props.match.params.path}\n          user={this.props.loggedInUser}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          assets={assets}\n          permissionToEdit\n        ></MainContent>\n      </>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js",["194","195","196"],"import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport PrivateRoute from \"../../guards/PrivateRoute\";\nimport ColorPalette from \"../brandPresets/ColorPalette\";\nimport MyModal from \"../utils/MyModal\";\n\nconst SideMenu = ({\n  shareMessage,\n  permissionToShare,\n  menuIsOpen,\n  toggleMenu,\n  children,\n  ...props\n}) => {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const email = document.getElementById(\"email\").value;\n    const projectId = props.match.params.id;\n    shareMessage({ email, projectId });\n  };\n\n  return (\n    <section className={`section side-menu ${menuIsOpen}`}>\n      <button className=\"btn-side-menu remove-btn\" onClick={toggleMenu}>\n        <img src={`${process.env.REACT_APP_URL}/menu.svg`} alt=\"Menu\"></img>\n      </button>\n      {/*\n      <Switch>\n\n      </Switch> */}\n\n      {children}\n\n      {permissionToShare && <MyModal sendMessage={handleSubmit}></MyModal>}\n    </section>\n  );\n};\nexport default SideMenu;\n\n// export default class SideMenu extends Component {\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     const email = document.getElementById(\"email\").value;\n//     const projectId = this.props.match.params.id;\n//     this.props.shareMessage({ email, projectId });\n//   };\n\n//   render() {\n//     const { permissionToShare } = this.props;\n//     return (\n//       <section className={`section side-menu ${this.props.menuIsOpen}`}>\n//         <Switch>\n//           <PrivateRoute\n//             exact\n//             path=\"/project/:id/edit/colorPalette\"\n//             user={user}\n//             activeProject={user.activeProject}\n//             toggleMenu={toggleMenu}\n//             menuIsOpen={menuIsOpen}\n//             // colorPalette={colorPalette}\n//             // // deleteColor={deleteColor}\n//             // typeset={typeset}\n//             // assets={assets}\n//             // textstyles={textstyles}\n//             component={ColorPalette}\n//           />\n//         </Switch>\n\n//         <button\n//           className=\"btn-side-menu remove-btn\"\n//           onClick={this.props.toggleMenu}\n//         >\n//           <img src={`${process.env.REACT_APP_URL}/menu.svg`} alt=\"Menu\"></img>\n//         </button>\n\n//         {this.props.children}\n\n//         {permissionToShare && (\n//           <MyModal sendMessage={this.handleSubmit}></MyModal>\n//         )}\n//       </section>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js",["197","198","199","200"],"import React, { useEffect, useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport TextEditor from \"../utils/TextEditor\";\nimport { useUserState } from \"../../context/UserContext\";\n\nconst MainContent = ({ menuIsOpen, permissionToEdit, ...props }) => {\n  const [state, setState] = useState({});\n  const user = useUserState();\n  const projectService = () => {};\n\n  // const displayRows = () => {\n  //   projectService.displayRows(user.activeProject).then((projectData) => {\n  //     const { rows, colorPalette, typeset, textstyles } = projectData;\n\n  //     setState(\n  //       {\n  //         ...state,\n  //         rows: rows,\n  //         colorPalette: colorPalette,\n  //         typeset: typeset,\n  //         textstyles: textstyles,\n  //       },\n  //       () => {\n  //         console.log(state.rows);\n  //       }\n  //     );\n  //   });\n  // };\n\n  const addNewRow = (layout) => {\n    const userId = user.id;\n    projectService.createNewRow({ layout, userId }).then(\n      (projectWithRowAdded) => {\n        setState({\n          ...state,\n          rows: projectWithRowAdded.rows,\n        });\n      },\n      (error) => console.log(error)\n    );\n  };\n\n  const deleteRow = (rowId) => {\n    projectService.deleteRow(rowId).then(\n      (project) => {\n        // displayRows();\n      },\n      (error) => {\n        const { message } = error;\n        console.error(message);\n      }\n    );\n  };\n\n  const addContent = (rowId, slotIdx, type) => {\n    projectService.addContent({ rowId, slotIdx, type }).then((payload) => {\n      // displayRows();\n    });\n  };\n\n  const addContentFront = (rowId, slotIdx, type) => {\n    projectService.fetchContent(rowId).then((payload) => {\n      let content = payload;\n\n      content[slotIdx] = { order: slotIdx, type: type };\n\n      projectService\n        .insertSlot(content, rowId)\n        .then((payload) => {})\n        .catch((err) => console.log(err));\n    });\n  };\n\n  const addFontAsContent = (rowId, slotIdx, type) => {\n    projectService\n      .addFontAsContent({ rowId, slotIdx, type })\n      .then((payload) => {\n        console.log(payload);\n        // this.displayRows();\n      });\n  };\n\n  const addImageAsContent = (file, rowId, slotIdx, type) => {\n    const loadingImg = document.createElement(\"img\");\n    loadingImg.setAttribute(\"src\", \"/loading.svg\");\n    const loadingParent = document.querySelector(\".image-label\");\n    loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append(\"file\", file[0]);\n\n    projectService.addImageAsContent({ uploadData }).then((imageURl) => {\n      let image = imageURl;\n      projectService.fetchContent(rowId).then((payload) => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, image: image, type: type };\n        projectService\n          .insertSlot(content, rowId)\n          .then((payload) => {\n            console.log(payload);\n            // displayRows();\n          })\n          .catch((err) => console.log(err));\n      });\n    });\n  };\n\n  const addDownloadAsContent = (file, rowId, slotIdx, type) => {\n    const loadingImg = document.createElement(\"img\");\n    loadingImg.setAttribute(\"src\", \"/loading.svg\");\n    const loadingParent = document.querySelector(\".file-label\");\n    loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append(\"file\", file[0]);\n\n    projectService.addDownloadAsContent({ uploadData }).then((assetObject) => {\n      console.log(assetObject);\n      projectService.fetchContent(rowId).then((payload) => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, asset: assetObject, type: type };\n        projectService\n          .insertSlot(content, rowId)\n          .then((payload) => {\n            console.log(payload);\n            // displayRows();\n          })\n          .catch((err) => console.log(err));\n      });\n    });\n  };\n\n  useEffect(() => {\n    // displayRows();\n  }, []);\n\n  const path = props.match.params.id;\n  const { colorPalette, typeset, textstyles } = state;\n\n  return (\n    <div className={`main-content section is-paddingless\t ${menuIsOpen}`}>\n      <section className=\"section rows-container is-paddingless\t\">\n        {state.rows &&\n          state.rows.map((row, rowIdx) => (\n            <div key={row._id} className=\"columns is-multiline is-marginless\">\n              {row.slots.map((slot, slotIdx) => (\n                <div\n                  key={slotIdx}\n                  id={`slot-${rowIdx}-${slotIdx}`}\n                  className={`${row.layout} column row slot`}\n                >\n                  {row.content[slotIdx].type && (\n                    <React.Fragment>\n                      {row.content[slotIdx].type === \"assets\" && (\n                        <>\n                          {/* {assets && assets.length > 0 && ( */}\n                          <div\n                            className={`assets-container content-container ${\n                              row.content[slotIdx].image ? \"has-image\" : \"\"\n                            }`}\n                          >\n                            {!row.content[slotIdx].image && (\n                              <Dropzone\n                                onDrop={(acceptedFiles) =>\n                                  addImageAsContent(\n                                    acceptedFiles,\n                                    row._id,\n                                    slotIdx,\n                                    \"assets\"\n                                  )\n                                }\n                              >\n                                {({ getRootProps, getInputProps }) => (\n                                  <section class=\"image-label\">\n                                    <div {...getRootProps()}>\n                                      <input {...getInputProps()} />\n                                      <p>Click to select image</p>\n                                    </div>\n                                  </section>\n                                )}\n                              </Dropzone>\n                            )}\n                            {row.content[slotIdx].image && (\n                              <img src={row.content[slotIdx].image} alt=\"\" />\n                            )}\n                          </div>\n                        </>\n                      )}\n\n                      {row.content[slotIdx].type === \"colorPalette\" && (\n                        <>\n                          {colorPalette && colorPalette.length > 0 && (\n                            <div className=\"color-container content-container\">\n                              {colorPalette.map((color, idx) => (\n                                <div\n                                  className=\"color\"\n                                  key={idx}\n                                  style={{\n                                    width: 100 / colorPalette.length + \"%\",\n                                    backgroundColor: color.hexadecimal,\n                                  }}\n                                >\n                                  <span className=\"color-name vertical-text\">\n                                    {color.name}\n                                  </span>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n\n                          {!colorPalette.length && (\n                            <div className=\"color-container content-container\">\n                              <div class=\"notification is-info\">\n                                Add your first color.{\" \"}\n                                <a\n                                  href={`/project/${user.activeProject}/edit/colorPalette/new`}\n                                >\n                                  New color\n                                </a>\n                              </div>\n                            </div>\n                          )}\n                        </>\n                      )}\n                      {row.content[slotIdx].type === \"typeset\" && (\n                        <>\n                          <div className=\"field has-addons\">\n                            {typeset && typeset.length > 0 && (\n                              <div className=\"typeset-container content-container\">\n                                {typeset.map((type) => (\n                                  // <p className='control'>\n                                  //   <button\n                                  //     className='button is-small'\n                                  //     onClick={slodIdx =>\n                                  //       addFontAsContent(\n                                  //         row._id,\n                                  //         slotIdx,\n                                  //         'typeset'\n                                  //       )\n                                  //     }\n                                  //     style={{ fontFamily: type.fontFamily }}\n                                  //   >\n                                  //     {type.fontFamily}\n                                  //   </button>\n                                  // </p>\n                                  <React.Fragment>\n                                    <div>{type.fontFamily}</div>\n                                    <div\n                                      style={{ fontFamily: type.fontFamily }}\n                                      className=\"is-size-3\"\n                                    >\n                                      Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn\n                                      Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n                                      0123456789 !\"#$%&/()=?´¨@\n                                    </div>\n                                  </React.Fragment>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n\n                          {!typeset.length && (\n                            <div className=\"typeset-container content-container\">\n                              <div class=\"notification is-info\">\n                                Add your first type.{\" \"}\n                                <a href={`/project/${path}/edit/typeset`}>\n                                  New type\n                                </a>\n                              </div>\n                            </div>\n                          )}\n                        </>\n                      )}\n\n                      {row.content[slotIdx].type === \"textedit\" && (\n                        <div className=\"content-container textedit-container\">\n                          <TextEditor></TextEditor>\n                        </div>\n                      )}\n\n                      {row.content[slotIdx].type === \"textstyles\" && (\n                        <>\n                          {textstyles && (\n                            <div className=\"type-container content-container\">\n                              {textstyles.map((style, idx) => (\n                                <div\n                                  className=\"type\"\n                                  key={idx}\n                                  style={{\n                                    fontFamily: style.fontFamily,\n                                    fontWeight: style.fontWeight,\n                                    fontSize: `${style.fontSize}rem`,\n                                    letterSpacing: `${style.letterSpacing}rem`,\n                                    lineHeight: style.lineHeight,\n                                  }}\n                                >\n                                  {style.name}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </>\n                      )}\n\n                      {row.content[slotIdx].type === \"downloads\" && (\n                        <>\n                          {/* {assets && assets.length > 0 && ( */}\n                          <div className=\"download-container content-container\">\n                            {!row.content[slotIdx].asset && (\n                              <Dropzone\n                                onDrop={(acceptedFiles) =>\n                                  addDownloadAsContent(\n                                    acceptedFiles,\n                                    row._id,\n                                    slotIdx,\n                                    \"downloads\"\n                                  )\n                                }\n                              >\n                                {({ getRootProps, getInputProps }) => (\n                                  <section class=\"file-label\">\n                                    <div {...getRootProps()}>\n                                      <input {...getInputProps()} />\n                                      <p>Click to select file</p>\n                                    </div>\n                                  </section>\n                                )}\n                              </Dropzone>\n                            )}\n                            {row.content[slotIdx].asset && (\n                              // row.content[slotIdx].asset\n                              <a\n                                className=\"button\"\n                                href={row.content[slotIdx].asset.secure_url}\n                                target=\"_blank\"\n                                download\n                              >\n                                Download {row.content[slotIdx].asset.name}\n                              </a>\n                            )}\n                          </div>\n                        </>\n                      )}\n                    </React.Fragment>\n                  )}\n\n                  {!row.content[slotIdx].type && (\n                    <React.Fragment>\n                      <div className=\"content-container\">\n                        <div className=\"dropdown is-hoverable\">\n                          <div className=\"dropdown-trigger\">\n                            <button\n                              className=\"button\"\n                              aria-haspopup=\"true\"\n                              aria-controls=\"dropdown-menu4\"\n                            >\n                              <span>Add content</span>\n                              <span className=\"icon is-small\">\n                                <img\n                                  src={`${process.env.REACT_APP_URL}/chevron-down.svg`}\n                                ></img>\n                              </span>\n                            </button>\n                          </div>\n                          <div\n                            className=\"dropdown-menu\"\n                            id=\"dropdown-menu4\"\n                            role=\"menu\"\n                          >\n                            <div className=\"dropdown-content\">\n                              <div className=\"dropdown-item\">\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"textedit\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Text editor\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"colorPalette\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Color Palette\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"assets\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Image\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"typeset\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Typography\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"textstyles\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    TextStyles\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"downloads\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Asset\n                                  </button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </React.Fragment>\n                  )}\n                </div>\n              ))}\n\n              {permissionToEdit && (\n                <button className=\"close\" onClick={() => deleteRow(row._id)}>\n                  Cerrar\n                </button>\n              )}\n            </div>\n          ))}\n\n        {permissionToEdit && (\n          <div className=\"column is-full layout-btn-container\">\n            <p className=\"header subtitle is-4 is-primary\">Choose layout</p>\n            <div className=\"inner\">\n              <div className=\"layout-btn\" onClick={() => addNewRow(\"is-full\")}>\n                <img\n                  src={`${process.env.REACT_APP_URL}/full.svg`}\n                  alt=\"Row\"\n                ></img>\n                Full\n              </div>\n\n              <div className=\"layout-btn\" onClick={() => addNewRow(\"is-half\")}>\n                <img\n                  src={`${process.env.REACT_APP_URL}/half.svg`}\n                  alt=\"Row\"\n                ></img>\n                Half\n              </div>\n\n              <div\n                className=\"layout-btn\"\n                onClick={() => addNewRow(\"is-one-third\")}\n              >\n                <img\n                  src={`${process.env.REACT_APP_URL}/third.svg`}\n                  alt=\"Row\"\n                ></img>\n                Third\n              </div>\n\n              <div\n                className=\"layout-btn\"\n                onClick={() => addNewRow(\"is-two-thirds-first\")}\n              >\n                <img\n                  src={`${process.env.REACT_APP_URL}/two-thirds-first.svg`}\n                  alt=\"Row\"\n                ></img>\n                Two Thirds\n              </div>\n\n              <div\n                className=\"layout-btn\"\n                onClick={() => addNewRow(\"is-two-thirds-last\")}\n              >\n                <img\n                  src={`${process.env.REACT_APP_URL}/two-thirds-last.svg`}\n                  alt=\"Row\"\n                ></img>\n                Two Thirds\n              </div>\n            </div>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default MainContent;\n// export default class MainContent extends Component {\n//   constructor(props) {\n//     super(props);\n//     state = {};\n//     projectService = new ProjectService();\n//     loadingImg = \"\";\n//     this.loadingParent = \"\";\n//   }\n\n//   displayRows = () => {\n//     const { id } = this.props.match.params;\n\n//     this.projectService.displayRows(id).then((projectData) => {\n//       const { rows, colorPalette, typeset, textstyles } = projectData;\n//       this.setState(\n//         {\n//           ...this.state,\n//           rows: rows,\n//           colorPalette: colorPalette,\n//           typeset: typeset,\n//           textstyles: textstyles,\n//         },\n//         () => {\n//           console.log(this.state.rows);\n//         }\n//       );\n//     });\n//   };\n\n//   addNewRow = (layout) => {\n//     const userId = this.props.user.id;\n//     this.projectService.createNewRow({ layout, userId }).then(\n//       (projectWithRowAdded) => {\n//         this.setState({\n//           ...this.state,\n//           rows: projectWithRowAdded.rows,\n//         });\n//       },\n//       (error) => console.log(error)\n//     );\n//   };\n\n//   deleteRow = (rowId) => {\n//     this.projectService.deleteRow(rowId).then(\n//       (project) => {\n//         this.displayRows();\n//       },\n//       (error) => {\n//         const { message } = error;\n//         console.error(message);\n//       }\n//     );\n//   };\n\n//   addContent = (rowId, slotIdx, type) => {\n//     this.projectService.addContent({ rowId, slotIdx, type }).then((payload) => {\n//       this.displayRows();\n//     });\n//   };\n\n//   addContentFront = (rowId, slotIdx, type) => {\n//     this.projectService.fetchContent(rowId).then((payload) => {\n//       let content = payload;\n\n//       content[slotIdx] = { order: slotIdx, type: type };\n\n//       this.projectService\n//         .insertSlot(content, rowId)\n//         .then((payload) => this.displayRows())\n//         .catch((err) => console.log(err));\n//     });\n//   };\n\n//   addFontAsContent = (rowId, slotIdx, type) => {\n//     this.projectService\n//       .addFontAsContent({ rowId, slotIdx, type })\n//       .then((payload) => {\n//         console.log(payload);\n//         // this.displayRows();\n//       });\n//   };\n\n//   addImageAsContent = (file, rowId, slotIdx, type) => {\n//     this.loadingImg = document.createElement(\"img\");\n//     this.loadingImg.setAttribute(\"src\", \"/loading.svg\");\n//     this.loadingParent = document.querySelector(\".image-label\");\n//     this.loadingParent.appendChild(this.loadingImg);\n\n//     const uploadData = new FormData();\n//     uploadData.append(\"file\", file[0]);\n\n//     this.projectService.addImageAsContent({ uploadData }).then((imageURl) => {\n//       let image = imageURl;\n//       this.projectService.fetchContent(rowId).then((payload) => {\n//         let content = payload;\n//         content[slotIdx] = { order: slotIdx, image: image, type: type };\n//         this.projectService\n//           .insertSlot(content, rowId)\n//           .then((payload) => {\n//             console.log(payload);\n//             this.displayRows();\n//           })\n//           .catch((err) => console.log(err));\n//       });\n//     });\n//   };\n\n//   addDownloadAsContent = (file, rowId, slotIdx, type) => {\n//     this.loadingImg = document.createElement(\"img\");\n//     this.loadingImg.setAttribute(\"src\", \"/loading.svg\");\n//     this.loadingParent = document.querySelector(\".file-label\");\n//     this.loadingParent.appendChild(this.loadingImg);\n\n//     const uploadData = new FormData();\n//     uploadData.append(\"file\", file[0]);\n\n//     this.projectService\n//       .addDownloadAsContent({ uploadData })\n//       .then((assetObject) => {\n//         console.log(assetObject);\n//         this.projectService.fetchContent(rowId).then((payload) => {\n//           let content = payload;\n//           content[slotIdx] = { order: slotIdx, asset: assetObject, type: type };\n//           this.projectService\n//             .insertSlot(content, rowId)\n//             .then((payload) => {\n//               console.log(payload);\n//               this.displayRows();\n//             })\n//             .catch((err) => console.log(err));\n//         });\n//       });\n//   };\n\n//   componentDidMount() {\n//     this.displayRows();\n//   }\n\n//   render() {\n//     // const path = this.props.user.activeProject;\n//     const path = this.props.match.params.id;\n//     const { permissionToEdit } = this.props;\n//     const { colorPalette, typeset, textstyles } = this.state;\n\n//     return (\n//       <div\n//         className={`main-content section is-paddingless\t ${this.props.menuIsOpen}`}\n//       >\n//         <section className=\"section rows-container is-paddingless\t\">\n//           {this.state.rows &&\n//             this.state.rows.map((row, rowIdx) => (\n//               <div key={row._id} className=\"columns is-multiline is-marginless\">\n//                 {row.slots.map((slot, slotIdx) => (\n//                   <div\n//                     key={slotIdx}\n//                     id={`slot-${rowIdx}-${slotIdx}`}\n//                     className={`${row.layout} column row slot`}\n//                   >\n//                     {row.content[slotIdx].type && (\n//                       <React.Fragment>\n//                         {row.content[slotIdx].type === \"assets\" && (\n//                           <>\n//                             {/* {assets && assets.length > 0 && ( */}\n//                             <div\n//                               className={`assets-container content-container ${\n//                                 row.content[slotIdx].image ? \"has-image\" : \"\"\n//                               }`}\n//                             >\n//                               {!row.content[slotIdx].image && (\n//                                 <Dropzone\n//                                   onDrop={(acceptedFiles) =>\n//                                     this.addImageAsContent(\n//                                       acceptedFiles,\n//                                       row._id,\n//                                       slotIdx,\n//                                       \"assets\"\n//                                     )\n//                                   }\n//                                 >\n//                                   {({ getRootProps, getInputProps }) => (\n//                                     <section class=\"image-label\">\n//                                       <div {...getRootProps()}>\n//                                         <input {...getInputProps()} />\n//                                         <p>Click to select image</p>\n//                                       </div>\n//                                     </section>\n//                                   )}\n//                                 </Dropzone>\n//                               )}\n//                               {row.content[slotIdx].image && (\n//                                 <img src={row.content[slotIdx].image} alt=\"\" />\n//                               )}\n//                             </div>\n//                           </>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"colorPalette\" && (\n//                           <>\n//                             {colorPalette && colorPalette.length > 0 && (\n//                               <div className=\"color-container content-container\">\n//                                 {colorPalette.map((color, idx) => (\n//                                   <div\n//                                     className=\"color\"\n//                                     key={idx}\n//                                     style={{\n//                                       width: 100 / colorPalette.length + \"%\",\n//                                       backgroundColor: color.hexadecimal,\n//                                     }}\n//                                   >\n//                                     <span className=\"color-name vertical-text\">\n//                                       {color.name}\n//                                     </span>\n//                                   </div>\n//                                 ))}\n//                               </div>\n//                             )}\n\n//                             {!colorPalette.length && (\n//                               <div className=\"color-container content-container\">\n//                                 <div class=\"notification is-info\">\n//                                   Add your first color.{\" \"}\n//                                   <a\n//                                     href={`/project/${path}/edit/colorPalette/new`}\n//                                   >\n//                                     New color\n//                                   </a>\n//                                 </div>\n//                               </div>\n//                             )}\n//                           </>\n//                         )}\n//                         {row.content[slotIdx].type === \"typeset\" && (\n//                           <>\n//                             <div className=\"field has-addons\">\n//                               {typeset && typeset.length > 0 && (\n//                                 <div className=\"typeset-container content-container\">\n//                                   {typeset.map((type) => (\n//                                     // <p className='control'>\n//                                     //   <button\n//                                     //     className='button is-small'\n//                                     //     onClick={slodIdx =>\n//                                     //       this.addFontAsContent(\n//                                     //         row._id,\n//                                     //         slotIdx,\n//                                     //         'typeset'\n//                                     //       )\n//                                     //     }\n//                                     //     style={{ fontFamily: type.fontFamily }}\n//                                     //   >\n//                                     //     {type.fontFamily}\n//                                     //   </button>\n//                                     // </p>\n//                                     <React.Fragment>\n//                                       <div>{type.fontFamily}</div>\n//                                       <div\n//                                         style={{ fontFamily: type.fontFamily }}\n//                                         className=\"is-size-3\"\n//                                       >\n//                                         Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm\n//                                         Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n//                                         0123456789 !\"#$%&/()=?´¨@\n//                                       </div>\n//                                     </React.Fragment>\n//                                   ))}\n//                                 </div>\n//                               )}\n//                             </div>\n\n//                             {!typeset.length && (\n//                               <div className=\"typeset-container content-container\">\n//                                 <div class=\"notification is-info\">\n//                                   Add your first type.{\" \"}\n//                                   <a href={`/project/${path}/edit/typeset`}>\n//                                     New type\n//                                   </a>\n//                                 </div>\n//                               </div>\n//                             )}\n//                           </>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"textedit\" && (\n//                           <div className=\"content-container textedit-container\">\n//                             <TextEditor></TextEditor>\n//                           </div>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"textstyles\" && (\n//                           <>\n//                             {textstyles && (\n//                               <div className=\"type-container content-container\">\n//                                 {textstyles.map((style, idx) => (\n//                                   <div\n//                                     className=\"type\"\n//                                     key={idx}\n//                                     style={{\n//                                       fontFamily: style.fontFamily,\n//                                       fontWeight: style.fontWeight,\n//                                       fontSize: `${style.fontSize}rem`,\n//                                       letterSpacing: `${style.letterSpacing}rem`,\n//                                       lineHeight: style.lineHeight,\n//                                     }}\n//                                   >\n//                                     {style.name}\n//                                   </div>\n//                                 ))}\n//                               </div>\n//                             )}\n//                           </>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"downloads\" && (\n//                           <>\n//                             {/* {assets && assets.length > 0 && ( */}\n//                             <div className=\"download-container content-container\">\n//                               {!row.content[slotIdx].asset && (\n//                                 <Dropzone\n//                                   onDrop={(acceptedFiles) =>\n//                                     this.addDownloadAsContent(\n//                                       acceptedFiles,\n//                                       row._id,\n//                                       slotIdx,\n//                                       \"downloads\"\n//                                     )\n//                                   }\n//                                 >\n//                                   {({ getRootProps, getInputProps }) => (\n//                                     <section class=\"file-label\">\n//                                       <div {...getRootProps()}>\n//                                         <input {...getInputProps()} />\n//                                         <p>Click to select file</p>\n//                                       </div>\n//                                     </section>\n//                                   )}\n//                                 </Dropzone>\n//                               )}\n//                               {row.content[slotIdx].asset && (\n//                                 // row.content[slotIdx].asset\n//                                 <a\n//                                   className=\"button\"\n//                                   href={row.content[slotIdx].asset.secure_url}\n//                                   target=\"_blank\"\n//                                   download\n//                                 >\n//                                   Download {row.content[slotIdx].asset.name}\n//                                 </a>\n//                               )}\n//                             </div>\n//                           </>\n//                         )}\n//                       </React.Fragment>\n//                     )}\n\n//                     {!row.content[slotIdx].type && (\n//                       <React.Fragment>\n//                         <div className=\"content-container\">\n//                           <div className=\"dropdown is-hoverable\">\n//                             <div className=\"dropdown-trigger\">\n//                               <button\n//                                 className=\"button\"\n//                                 aria-haspopup=\"true\"\n//                                 aria-controls=\"dropdown-menu4\"\n//                               >\n//                                 <span>Add content</span>\n//                                 <span className=\"icon is-small\">\n//                                   <img\n//                                     src={`${process.env.REACT_APP_URL}/chevron-down.svg`}\n//                                   ></img>\n//                                 </span>\n//                               </button>\n//                             </div>\n//                             <div\n//                               className=\"dropdown-menu\"\n//                               id=\"dropdown-menu4\"\n//                               role=\"menu\"\n//                             >\n//                               <div className=\"dropdown-content\">\n//                                 <div className=\"dropdown-item\">\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"textedit\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Text editor\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"colorPalette\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Color Palette\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"assets\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Image\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"typeset\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Typography\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"textstyles\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       TextStyles\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"downloads\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Asset\n//                                     </button>\n//                                   </div>\n//                                 </div>\n//                               </div>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </React.Fragment>\n//                     )}\n//                   </div>\n//                 ))}\n\n//                 {permissionToEdit && (\n//                   <button\n//                     className=\"close\"\n//                     onClick={() => this.deleteRow(row._id)}\n//                   >\n//                     Cerrar\n//                   </button>\n//                 )}\n//               </div>\n//             ))}\n\n//           {permissionToEdit && (\n//             <div className=\"column is-full layout-btn-container\">\n//               <p className=\"header subtitle is-4 is-primary\">Choose layout</p>\n//               <div className=\"inner\">\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-full\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/full.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Full\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-half\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/half.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Half\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-one-third\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/third.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Third\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-two-thirds-first\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/two-thirds-first.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Two Thirds\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-two-thirds-last\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/two-thirds-last.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Two Thirds\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </section>\n//       </div>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js",["201"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\n\nexport default class AdobeFontsImporter extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = () => {};\n\n    this.state = {\n      projectId: \"gnh6ghd\",\n      token: \"0bb2988cbd31ce44bda853c78df227e26a0d86c8\",\n    };\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // const projectId = document.querySelector('input[name=\"projectId\"]').value;\n    // const token = document.querySelector('input[name=\"token\"]').value;\n\n    this.projectService.getGoogleFonts().then(\n      (fonts) => {\n        this.setState({\n          ...this.state,\n          ...fonts,\n        });\n      },\n      (error) => console.error(error)\n    );\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ ...this.state, [name]: value });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\" className=\"label\">\n            Project Id:\n          </label>\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              name=\"projectId\"\n              value={this.state.projectId}\n              className=\"input\"\n              placeholder=\"Introduce the project id of your project\"\n              onChange={this.handleChange}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"path\" className=\"label\">\n            Token:\n          </label>\n          <div className=\"control\">\n            <input\n              type=\"password\"\n              name=\"token\"\n              value={this.state.token}\n              className=\"input\"\n              placeholder=\"Introduce the token for your Adobe Fonts account\"\n              onChange={this.handleChange}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"control\">\n          <input\n            type=\"submit\"\n            className=\"button is-link\"\n            value=\"Import fonts\"\n          ></input>\n        </div>\n      </form>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js",["202","203","204"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    minWidth: '500px',\n    minHeight: '250px',\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    padding: \"2em 3em\",\n    transform: 'translate(-40%, -50%)',\n    boxShadow: \"0 0 20px  rgba(60,90,195, 0.4)\"\n  }\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n// Modal.setAppElement('#yourAppElement')\n\nexport default class MyModal extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    // this.subtitle.style.color = '#f00';\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    const projectId = this.props.projectId;\n\n    return (\n      <div>\n        <button className=\"button is-primary is-light is-fullwidth\" onClick={this.openModal}>Share this project</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel='Example Modal'\n        >\n          <div>\n          <a class='delete close-modal' onClick={this.closeModal}></a>\n          <h3 className='title is-4'>Share this Brandlink</h3>\n          <form id='contact-form' onSubmit={this.props.sendMessage} method='POST'>\n            \n            <div class='field is-grouped'>\n              <p class='control is-expanded'>\n                <input\n                class=\"input\"\n                  type='email'\n                  id='email'\n                  aria-describedby='emailHelp'\n                  placeholder='Email'\n                ></input>\n              </p>\n              <input\n              type='hidden'\n              name='projectid'\n              id='projectid'\n              value={projectId}\n            />\n              <p class='control'>\n                <button type=\"submit\" class='button is-info'>Send</button>\n              </p>\n            </div>\n          </form>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js",[],["205","206"],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js",["207","208","209"],"import React, { Component } from 'react';\n\nexport default class Dropdown extends Component {\n  render() {\n    const { row, slotIdx } = this.props;\n    return (\n      <div className='dropdown is-hoverable'>\n        <div className='dropdown-trigger'>\n          <button\n            className='button'\n            aria-haspopup='true'\n            aria-controls='dropdown-menu4'\n          >\n            <span>Add content</span>\n            <span className='icon is-small'>\n              <img src={`${process.env.REACT_APP_URL}/chevron-down.svg`}></img>\n            </span>\n          </button>\n        </div>\n        <div className='dropdown-menu' id='dropdown-menu4' role='menu'>\n          <div className='dropdown-content'>\n            <div className='dropdown-item'>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Text editor\n                </button>\n              </div>\n              <div>\n                <button\n                  onClick={() => this.props.addContent()}\n                  className='button'\n                >\n                  Color Palette\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Image\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Typography display\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/serviceWorker.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup/Signup.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login/Login.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/profile/Profile.js",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"218","line":3,"column":25,"nodeType":"216","messageId":"217","endLine":3,"endColumn":29},{"ruleId":"214","severity":1,"message":"219","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":20},{"ruleId":"214","severity":1,"message":"220","line":16,"column":8,"nodeType":"216","messageId":"217","endLine":16,"endColumn":16},{"ruleId":"214","severity":1,"message":"221","line":17,"column":8,"nodeType":"216","messageId":"217","endLine":17,"endColumn":15},{"ruleId":"214","severity":1,"message":"222","line":18,"column":8,"nodeType":"216","messageId":"217","endLine":18,"endColumn":15},{"ruleId":"214","severity":1,"message":"223","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":22},{"ruleId":"214","severity":1,"message":"224","line":20,"column":8,"nodeType":"216","messageId":"217","endLine":20,"endColumn":14},{"ruleId":"214","severity":1,"message":"225","line":21,"column":8,"nodeType":"216","messageId":"217","endLine":21,"endColumn":18},{"ruleId":"214","severity":1,"message":"226","line":22,"column":8,"nodeType":"216","messageId":"217","endLine":22,"endColumn":20},{"ruleId":"214","severity":1,"message":"227","line":28,"column":11,"nodeType":"216","messageId":"217","endLine":28,"endColumn":25},{"ruleId":"214","severity":1,"message":"228","line":2,"column":27,"nodeType":"216","messageId":"217","endLine":2,"endColumn":40},{"ruleId":"229","severity":1,"message":"230","line":25,"column":57,"nodeType":"231","endLine":25,"endColumn":59,"suggestions":"232"},{"ruleId":"214","severity":1,"message":"233","line":21,"column":11,"nodeType":"216","messageId":"217","endLine":21,"endColumn":22},{"ruleId":"214","severity":1,"message":"234","line":1,"column":8,"nodeType":"216","messageId":"217","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"235","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"218","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":14},{"ruleId":"214","severity":1,"message":"236","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":19},{"ruleId":"214","severity":1,"message":"237","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":16},{"ruleId":"214","severity":1,"message":"238","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":19},{"ruleId":"214","severity":1,"message":"223","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":22},{"ruleId":"214","severity":1,"message":"239","line":65,"column":19,"nodeType":"216","messageId":"217","endLine":65,"endColumn":30},{"ruleId":"214","severity":1,"message":"234","line":1,"column":8,"nodeType":"216","messageId":"217","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"235","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"240","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":16},{"ruleId":"214","severity":1,"message":"236","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":19},{"ruleId":"214","severity":1,"message":"237","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":16},{"ruleId":"214","severity":1,"message":"238","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":19},{"ruleId":"214","severity":1,"message":"223","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":22},{"ruleId":"214","severity":1,"message":"234","line":1,"column":8,"nodeType":"216","messageId":"217","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"235","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"218","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":14},{"ruleId":"214","severity":1,"message":"223","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":22},{"ruleId":"214","severity":1,"message":"236","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":19},{"ruleId":"214","severity":1,"message":"237","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":16},{"ruleId":"214","severity":1,"message":"238","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":19},{"ruleId":"214","severity":1,"message":"234","line":1,"column":8,"nodeType":"216","messageId":"217","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"235","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"218","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":14},{"ruleId":"214","severity":1,"message":"223","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":22},{"ruleId":"214","severity":1,"message":"236","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":19},{"ruleId":"214","severity":1,"message":"237","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":16},{"ruleId":"214","severity":1,"message":"238","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":19},{"ruleId":"214","severity":1,"message":"223","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":22},{"ruleId":"214","severity":1,"message":"241","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":16},{"ruleId":"214","severity":1,"message":"242","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":20},{"ruleId":"214","severity":1,"message":"219","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":20},{"ruleId":"214","severity":1,"message":"243","line":55,"column":9,"nodeType":"216","messageId":"217","endLine":55,"endColumn":19},{"ruleId":"214","severity":1,"message":"244","line":74,"column":9,"nodeType":"216","messageId":"217","endLine":74,"endColumn":25},{"ruleId":"245","severity":1,"message":"246","line":332,"column":31,"nodeType":"247","endLine":337,"endColumn":32},{"ruleId":"248","severity":1,"message":"249","line":359,"column":33,"nodeType":"247","endLine":361,"endColumn":34},{"ruleId":"214","severity":1,"message":"223","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":22},{"ruleId":"214","severity":1,"message":"250","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":16},{"ruleId":"251","severity":1,"message":"252","line":67,"column":11,"nodeType":"247","endLine":67,"endColumn":67},{"ruleId":"253","severity":1,"message":"254","line":67,"column":11,"nodeType":"247","endLine":67,"endColumn":67},{"ruleId":"210","replacedBy":"255"},{"ruleId":"212","replacedBy":"256"},{"ruleId":"214","severity":1,"message":"257","line":5,"column":13,"nodeType":"216","messageId":"217","endLine":5,"endColumn":16},{"ruleId":"214","severity":1,"message":"258","line":5,"column":18,"nodeType":"216","messageId":"217","endLine":5,"endColumn":25},{"ruleId":"248","severity":1,"message":"249","line":16,"column":15,"nodeType":"247","endLine":16,"endColumn":74},"no-native-reassign",["259"],"no-negated-in-lhs",["260"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'ColorPalette' is defined but never used.","'NewColor' is defined but never used.","'TypeSet' is defined but never used.","'NewType' is defined but never used.","'ProjectService' is defined but never used.","'Assets' is defined but never used.","'TextStyles' is defined but never used.","'NewTextStyle' is defined but never used.","'currentProject' is assigned a value but never used.","'useRouteMatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'projects.length'. Either include it or remove the dependency array.","ArrayExpression",["261"],"'projectPath' is assigned a value but never used.","'React' is defined but never used.","'Component' is defined but never used.","'BrandHeader' is defined but never used.","'SideMenu' is defined but never used.","'MainContent' is defined but never used.","'hexadecimal' is assigned a value but never used.","'Dropzone' is defined but never used.","'Switch' is defined but never used.","'PrivateRoute' is defined but never used.","'addContent' is assigned a value but never used.","'addFontAsContent' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["259"],["260"],"'row' is assigned a value but never used.","'slotIdx' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},"Update the dependencies array to be: [projects.length]",{"range":"264","text":"265"},[824,826],"[projects.length]"]