[{"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js":"1","/Users/mariasimo/SideProjects/Brandlink/client/src/App.js":"2","/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js":"3","/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js":"4","/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js":"5","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js":"6","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js":"7","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js":"8","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js":"9","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js":"10","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js":"11","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js":"12","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js":"13","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js":"14","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js":"15","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js":"16","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js":"17","/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js":"18","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js":"19","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js":"20","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js":"21","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js":"22","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js":"23","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js":"24","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js":"25","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js":"26","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js":"27","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js":"28","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login.js":"29","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup.js":"30","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Profile.js":"31","/Users/mariasimo/SideProjects/Brandlink/client/src/hooks/useSetState.js":"32","/Users/mariasimo/SideProjects/Brandlink/client/src/context/AuthContext.js":"33"},{"size":360,"mtime":1611703341368,"results":"34","hashOfConfig":"35"},{"size":13834,"mtime":1611783165201,"results":"36","hashOfConfig":"35"},{"size":1699,"mtime":1611781015845,"results":"37","hashOfConfig":"35"},{"size":5705,"mtime":1611616881014,"results":"38","hashOfConfig":"35"},{"size":1896,"mtime":1611692790039,"results":"39","hashOfConfig":"35"},{"size":2330,"mtime":1611609614251,"results":"40","hashOfConfig":"35"},{"size":3166,"mtime":1611616053050,"results":"41","hashOfConfig":"35"},{"size":2203,"mtime":1611609614251,"results":"42","hashOfConfig":"35"},{"size":561,"mtime":1611609614252,"results":"43","hashOfConfig":"35"},{"size":3135,"mtime":1611609614248,"results":"44","hashOfConfig":"35"},{"size":4617,"mtime":1611609614248,"results":"45","hashOfConfig":"35"},{"size":3965,"mtime":1611609614248,"results":"46","hashOfConfig":"35"},{"size":2091,"mtime":1611609614249,"results":"47","hashOfConfig":"35"},{"size":2735,"mtime":1611609614249,"results":"48","hashOfConfig":"35"},{"size":2750,"mtime":1611609614249,"results":"49","hashOfConfig":"35"},{"size":8229,"mtime":1611609614248,"results":"50","hashOfConfig":"35"},{"size":1927,"mtime":1611785600295,"results":"51","hashOfConfig":"35"},{"size":6641,"mtime":1611616053049,"results":"52","hashOfConfig":"35"},{"size":835,"mtime":1611609614250,"results":"53","hashOfConfig":"35"},{"size":1147,"mtime":1611609614250,"results":"54","hashOfConfig":"35"},{"size":907,"mtime":1611609614251,"results":"55","hashOfConfig":"35"},{"size":20981,"mtime":1611609614250,"results":"56","hashOfConfig":"35"},{"size":959,"mtime":1611609614250,"results":"57","hashOfConfig":"35"},{"size":1101,"mtime":1611609614253,"results":"58","hashOfConfig":"35"},{"size":2156,"mtime":1611609614252,"results":"59","hashOfConfig":"35"},{"size":2583,"mtime":1611609614253,"results":"60","hashOfConfig":"35"},{"size":1670,"mtime":1611609614253,"results":"61","hashOfConfig":"35"},{"size":1579,"mtime":1611609614252,"results":"62","hashOfConfig":"35"},{"size":5269,"mtime":1611704937084,"results":"63","hashOfConfig":"35"},{"size":5603,"mtime":1611704871683,"results":"64","hashOfConfig":"35"},{"size":4578,"mtime":1611701326559,"results":"65","hashOfConfig":"35"},{"size":376,"mtime":1611701983254,"results":"66","hashOfConfig":"35"},{"size":1168,"mtime":1611783063970,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1wd42be",{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js",[],["140","141"],"/Users/mariasimo/SideProjects/Brandlink/client/src/App.js",["142","143"],"import React, { useEffect, useState } from \"react\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport AuthService from \"./services/AuthService\";\n\nimport Signup from \"./components/auth/Signup\";\nimport Profile from \"./components/auth/Profile\";\nimport Login from \"./components/auth/Login\";\n\nimport ProjectList from \"./components/project/ProjectList\";\nimport PrivateRoute from \"./guards/PrivateRoute\";\nimport { LandingPage } from \"./components/landingPage/LandingPage\";\nimport Navbar from \"./components/layout/Navbar\";\nimport NewProject from \"./components/project/NewProject\";\nimport EditProject from \"./components/project/EditProject\";\nimport ColorPalette from \"./components/brandPresets/ColorPalette\";\nimport NewColor from \"./components/brandPresets/NewColor\";\nimport TypeSet from \"./components/brandPresets/TypeSet\";\nimport NewType from \"./components/brandPresets/NewType\";\nimport ProjectService from \"./services/ProjectService\";\nimport Assets from \"./components/brandPresets/Assets\";\nimport TextStyles from \"./components/brandPresets/TextStyles\";\nimport NewTextStyle from \"./components/brandPresets/NewTextStyle\";\nimport ReadProject from \"./components/project/ReadProject\";\nimport { useAuthContext } from \"./context/AuthContext\";\n\nconst App = () => {\n  const authService = new AuthService();\n  const projectService = new ProjectService();\n  const { user, setAuthUser } = useAuthContext();\n\n  const [menuIsOpen, setMenuIsOpen] = useState(\"show\");\n  const [file, setFile] = useState(\"\");\n  // const [loadingImg, setLoadingImg] = useState('')\n  // const [loadingParent, setLoadingParent] = useState('')\n\n  // esto no estaba\n  const [project, setProject] = useState({\n    colorPalette: [],\n  });\n\n  const toggleMenu = () =>\n    setMenuIsOpen(menuIsOpen === \"show\" ? \"hide\" : \"show\");\n\n  const setLoggedUser = (user) => {\n    if (user === undefined || !user.hasOwnProperty(\"id\")) return;\n    setAuthUser(user);\n\n    if (user.activeProject) {\n      projectService.displayProject(user.id).then((projectData) => {\n        setProject({\n          title: projectData.title,\n          colorPalette: projectData.colorPalette || [],\n          typeset: projectData.typeset,\n          assets: projectData.assets,\n          textstyles: projectData.textstyles,\n        });\n        addFontsLinks(projectData.typeset);\n      });\n    }\n  };\n\n  const setActiveProject = (path) => {\n    const { id } = user;\n    authService.setActiveProject({ path, id }).then(\n      (activeProject) => console.log(activeProject)\n      // dont know what is this\n      // setUser(activeProject)\n    );\n  };\n\n  const addFontsLinks = (typeset) => {\n    typeset.map((type) => {\n      const link = document.createElement(\"link\");\n      link.setAttribute(\n        \"href\",\n        `https://fonts.googleapis.com/css?family=${type.fontFamily.replace(\n          \" \",\n          \"+\"\n        )}&display=swap`\n      );\n      link.setAttribute(\"rel\", `stylesheet`);\n      return document.head.appendChild(link);\n    });\n  };\n\n  const deleteProject = (projectId) => {\n    projectService.deleteProject(projectId).then(\n      (response) => {\n        console.log(\"proyecto borrado ok\");\n        console.log(response);\n        //Esto aqui pa què\n        // setUser(user);\n      },\n      (error) => {\n        console.error(error.message);\n      }\n    );\n  };\n\n  const addColorToPalette = ({ name, hexadecimal, id, colorId, history }) => {\n    projectService.addColorToPalette({ name, hexadecimal, id, colorId }).then(\n      (updatedProject) => {\n        // aquí parece que se guardan los datos de la paleta en el estado, pero no tiene que ver con el active project\n        console.log(updatedProject);\n\n        setProject({ ...project, colorPalette: updatedProject.colorPalette });\n        // setState({\n        //   ...this.state,\n        //   name: '',\n        //   hexadecimal: '',\n        //   colorPalette: updatedProject.colorPalette\n        // });\n        history.push(`/project/${id}/edit/colorPalette`, {\n          state: this.state.colorPalette,\n        });\n      },\n      (error) => console.error(error)\n    );\n  };\n\n  const deleteColor = (colorId) => {\n    projectService.deleteColor(colorId).then(\n      (project) => {\n        console.log(project);\n        // otra vez setear el usuario pa qué\n        // this.setUser(this.state.user);\n      },\n      (error) => console.error(error.message)\n    );\n  };\n\n  const saveType = ({ fontFamily, type, path, history }) => {\n    projectService.addTypeToTypeSet({ fontFamily, type, path }).then(\n      (updatedProject) => {\n        // setea la nueva tipografia\n\n        console.log(updatedProject);\n        // setState({\n        //   ...this.state,\n        //   fontFamily: '',\n        //   typeset: updatedProject.typeset\n        // });\n        history.push(`/project/${this.state.user.activeProject}/edit/typeSet`);\n      },\n      (error) => console.error(error)\n    );\n  };\n\n  const deleteType = (typeId) => {\n    projectService.deleteType(typeId).then(\n      (project) => {\n        // this.setUser(this.state.user);\n      },\n      (error) => console.log(error.message)\n    );\n  };\n\n  const addTextStyle = ({ textstyle, path, styleId, history }) => {\n    projectService.addTextStyle({ ...textstyle, path, styleId, history }).then(\n      () => {\n        // tampoco tengo ni idea de cómo se articula esta parte del estado\n\n        // this.setState({\n        //   ...this.state,\n        //   name: '',\n        //   fontFamily: '',\n        //   fontSize: 1,\n        //   fontWeight: null,\n        //   lineHeight: 1,\n        //   letterSpacing: 0,\n        //   uppercase: false\n        // });\n        history.push(\n          `/project/${this.state.user.activeProject}/edit/textStyles`\n        );\n      },\n      (error) => console.error(error)\n    );\n  };\n\n  const addAsset = ({ uploadData, path }) => {\n    // Esto puede suceder en el scope local y sacarlo del estado???\n    const loadingImg = document.createElement(\"img\");\n    loadingImg.setAttribute(\"src\", \"http://localhost:3000/loading.svg\");\n    const loadingParent = document.querySelector(\".file-label\");\n    loadingParent.appendChild(this.loadingImg);\n\n    projectService\n      .uploadAsset({ uploadData, path })\n      .then(() => {\n        // this.setUser(this.state.user);\n        loadingParent.removeChild(loadingImg);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const deleteAsset = (assetId) => {\n    projectService.deleteAsset(assetId).then(\n      (project) => {\n        // this.setUser(this.state.user);\n      },\n      (error) => {\n        const { message } = error;\n        console.error(message);\n      }\n    );\n  };\n\n  const onDragStart = (ev, id) => {\n    console.log(\"dragstart:\", id);\n    ev.dataTransfer.setData(\"id\", id);\n  };\n\n  const onDrop = (ev, slotIdx) => {\n    let fileId = ev.dataTransfer.getData(\"id\");\n    setFile(fileId);\n  };\n\n  const createProject = ({ title, path, history }) => {\n    projectService.createProject({ title, path }).then(\n      (projectCreated) => {\n        // esto es para limpiar algo??\n        // this.setState({ ...this.state, title: '', path: '' });\n\n        history.push(`/panel/${this.state.user.username}`);\n      },\n      (error) => console.error(error)\n    );\n  };\n\n  const shareMessage = ({ email, projectId }) => {\n    projectService.shareMessage({ email, projectId }).then((response) => {\n      if (response.msg === \"success\") {\n        alert(\"Message Sent.\");\n        this.resetForm();\n      } else if (response.msg === \"fail\") {\n        alert(\"Message failed to send.\");\n      }\n    });\n  };\n\n  const resetForm = () => document.getElementById(\"contact-form\").reset();\n\n  useEffect(() => {\n    const fetchUser = () => {\n      authService\n        .loggedInUser()\n        .then((user) => {\n          setLoggedUser(user);\n        })\n        .catch((error) => {\n          throw new Error(error);\n        });\n    };\n\n    fetchUser();\n  }, []);\n\n  const {\n    colorPalette,\n    typeset,\n    assets,\n    textstyles,\n    title: projectTitle,\n  } = project;\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <>\n        {user?.id && (\n          <Switch>\n            <Route\n              exact\n              path=\"/login\"\n              render={(match) => <Login {...match} />}\n            />\n            <Route\n              exact\n              path=\"/signup\"\n              render={(match) => <Signup {...match} />}\n            />\n            <Route exact path=\"/\" component={LandingPage} />\n\n            <PrivateRoute\n              exact\n              path=\"/profile/:id\"\n              user={user}\n              redirectPath=\"/login\"\n              component={Profile}\n            />\n\n            <Route\n              exact\n              path=\"/panel/:username\"\n              render={(match) => (\n                <ProjectList\n                  {...match}\n                  // necesito encontrar esto\n                  // setPath={setPath}\n                  setActiveProject={setActiveProject}\n                  deleteProject={deleteProject}\n                />\n              )}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/new\"\n              user={user}\n              component={NewProject}\n              toggleMenu={toggleMenu}\n              createProject={createProject}\n              menuIsOpen={menuIsOpen}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              typeset={typeset}\n              assets={assets}\n              textstyles={textstyles}\n              projectTitle={projectTitle}\n              shareMessage={shareMessage}\n              component={EditProject}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/colorPalette\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              deleteColor={deleteColor}\n              typeset={typeset}\n              assets={assets}\n              textstyles={textstyles}\n              component={ColorPalette}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/colorPalette/new/:colorId?\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              addColorToPalette={addColorToPalette}\n              typeset={typeset}\n              assets={assets}\n              textstyles={textstyles}\n              component={NewColor}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/typeset\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              deleteType={deleteType}\n              assets={assets}\n              typeset={typeset}\n              textstyles={textstyles}\n              component={TypeSet}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/typeset/new/:source?\"\n              user={user}\n              toggleMenu={toggleMenu}\n              colorPalette={colorPalette}\n              menuIsOpen={menuIsOpen}\n              typeset={typeset}\n              saveType={saveType}\n              assets={assets}\n              textstyles={textstyles}\n              component={NewType}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/assets\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              typeset={typeset}\n              assets={assets}\n              addAsset={addAsset}\n              deleteAsset={deleteAsset}\n              onDragStart={onDragStart}\n              onDrop={onDrop}\n              file={file}\n              textstyles={textstyles}\n              component={Assets}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/textStyles\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              typeset={typeset}\n              assets={assets}\n              textstyles={textstyles}\n              component={TextStyles}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/project/:id/edit/textStyles/new/:styleId?\"\n              user={user}\n              toggleMenu={toggleMenu}\n              menuIsOpen={menuIsOpen}\n              colorPalette={colorPalette}\n              typeset={typeset}\n              assets={assets}\n              textstyles={textstyles}\n              addTextStyle={addTextStyle}\n              component={NewTextStyle}\n            />\n          </Switch>\n        )}\n\n        {!user?.id && (\n          <>\n            <Switch>\n              <Route\n                exact\n                path=\"/login\"\n                render={(match) => <Login {...match} />}\n              />\n              <Route\n                exact\n                path=\"/signup\"\n                render={(match) => <Signup {...match} />}\n              />\n              <Route exact path=\"/\" component={LandingPage} />\n\n              <Route\n                exact\n                path=\"/project/:id\"\n                user={user}\n                colorPalette={colorPalette}\n                typeset={typeset}\n                assets={assets}\n                textstyles={textstyles}\n                projectTitle={projectTitle}\n                component={ReadProject}\n              />\n            </Switch>\n          </>\n        )}\n      </>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js",["144"],"import React, { Component } from 'react';\nimport ProjectService from '../../services/ProjectService';\nimport BrandHeader from '../layout/BrandHeader';\nimport SideMenu from '../layout/SideMenu';\nimport MainContent from '../layout/MainContent';\nimport { TwitterPicker } from 'react-color';\n\nexport default class NewColor extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = new ProjectService();\n\n    this.state = {\n      name: '',\n      hexadecimal: '',\n      colorPalette: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getColorData();\n  }\n\n  getColorData = () => {\n    const { colorId } = this.props.match.params;\n\n    if (colorId !== undefined) {\n      this.projectService.getColorData(colorId).then(\n        colorData => {\n          let color = colorData.colorPalette.filter(\n            color => color._id === colorId\n          );\n          this.setState({\n            ...this.state,\n            name: color[0].name,\n            hexadecimal: color[0].hexadecimal\n          });\n        },\n        error => {\n          const { message } = error;\n          console.error(message);\n        }\n      );\n    }\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ ...this.state, [name]: value });\n  };\n\n  handleChangeComplete = (color) => {\n    console.log(color)\n    console.log(this.state)\n    this.setState({ hexadecimal: color.hex });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, hexadecimal } = this.state;\n    const { id, colorId } = this.props.match.params;\n    const { history } = this.props;\n    this.props.addColorToPalette({ name, hexadecimal, id, colorId, history });\n  };\n  \n\n  render() {\n    const { name, hexadecimal } = this.state;\n    const { colorId, id } = this.props.match.params;\n    const { colorPalette, typeset, assets } = this.props;\n\n    return (\n      <>\n        <SideMenu\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n        >\n          {colorId && (\n            <BrandHeader\n              title='Edit color'\n              subtitle='Color Palette'\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n          {!colorId && (\n            <BrandHeader\n              title='New color'\n              subtitle='Color Palette'\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n\n          <form onSubmit={this.handleSubmit}>\n            <div className='field'>\n              <label htmlFor='title' className='label'>\n                Name:\n              </label>\n              <div className='control'>\n                <input\n                  type='text'\n                  name='name'\n                  className='input'\n                  value={name}\n                  placeholder='Introduce a name for your color'\n                  onChange={this.handleChange}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className='field'>\n              <label htmlFor='path' className='label'>\n                Hexadecimal:\n              </label>\n              <div className='control'>\n                {/* <input\n                type=\"text\"\n                name=\"hexadecimal\"\n                className=\"input\"\n                value={hexadecimal}\n                placeholder=\"Introduce the url for your project\"\n                onChange={this.handleChange}\n                required\n              /> */}\n                <TwitterPicker\n                  color={this.state.background}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </div>\n            </div>\n\n            <div className='control'>\n              {!colorId && (\n                <input\n                  type='submit'\n                  className='button is-link'\n                  value='Save Color'\n                ></input>\n              )}\n\n              {colorId && (\n                <input\n                  type='submit'\n                  className='button is-link'\n                  value='Edit Color'\n                ></input>\n              )}\n            </div>\n          </form>\n        </SideMenu>\n        <MainContent\n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          user={this.props.loggedInUser}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          assets={assets}\n          permissionToEdit\n        ></MainContent>\n      </>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js",["145","146","147"],"import React, { Component } from 'react';\nimport ProjectService from '../../services/ProjectService';\n\n// import { Content } from '../project/Content';\n// import Dropdown from '../utils/Dropdown';\nimport Dropzone from 'react-dropzone';\nimport TextEditor from '../utils/TextEditor';\nimport Dropdown from '../utils/Dropdown';\n\nexport default class MainContent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.projectService = new ProjectService();\n    this.loadingImg = '';\n    this.loadingParent = '';\n  }\n\n  displayRows = () => {\n    const { id } = this.props.match.params;\n    console.log(id);\n\n    this.projectService.displayRows(id).then(projectData => {\n      console.log(projectData);\n      const { rows, colorPalette, typeset, textstyles } = projectData;\n      this.setState(\n        {\n          ...this.state,\n          rows: rows,\n          colorPalette: colorPalette,\n          typeset: typeset,\n          textstyles: textstyles\n        },\n        () => {\n          console.log(this.state.rows);\n        }\n      );\n    });\n  };\n\n  addNewRow = layout => {\n    const userId = this.props.user.id;\n    this.projectService.createNewRow({ layout, userId }).then(\n      projectWithRowAdded => {\n        this.setState({\n          ...this.state,\n          rows: projectWithRowAdded.rows\n        });\n      },\n      error => console.log(error)\n    );\n  };\n\n  deleteRow = rowId => {\n    this.projectService.deleteRow(rowId).then(\n      project => {\n        this.displayRows();\n      },\n      error => {\n        const { message } = error;\n        console.error(message);\n      }\n    );\n  };\n\n  addContent = (rowId, slotIdx, type) => {\n    this.projectService.addContent({ rowId, slotIdx, type }).then(payload => {\n      this.displayRows();\n    });\n  };\n\n  addContentFront = (rowId, slotIdx, type) => {\n    this.projectService.fetchContent(rowId).then(payload => {\n      let content = payload;\n\n      content[slotIdx] = { order: slotIdx, type: type };\n\n      this.projectService\n        .insertSlot(content, rowId)\n        .then(payload => this.displayRows())\n        .catch(err => console.log(err));\n    });\n  };\n\n  addFontAsContent = (rowId, slotIdx, type) => {\n    this.projectService\n      .addFontAsContent({ rowId, slotIdx, type })\n      .then(payload => {\n        console.log(payload);\n        // this.displayRows();\n      });\n  };\n\n  addImageAsContent = (file, rowId, slotIdx, type) => {\n    this.loadingImg = document.createElement('img');\n    this.loadingImg.setAttribute('src', '/loading.svg');\n    this.loadingParent = document.querySelector('.image-label');\n    this.loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append('file', file[0]);\n\n    this.projectService.addImageAsContent({ uploadData }).then(imageURl => {\n      let image = imageURl;\n      this.projectService.fetchContent(rowId).then(payload => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, image: image, type: type };\n        this.projectService\n          .insertSlot(content, rowId)\n          .then(payload => {\n            console.log(payload);\n            this.displayRows();\n          })\n          .catch(err => console.log(err));\n      });\n    });\n  };\n\n  addDownloadAsContent = (file, rowId, slotIdx, type) => {\n    this.loadingImg = document.createElement('img');\n    this.loadingImg.setAttribute('src', '/loading.svg');\n    this.loadingParent = document.querySelector('.file-label');\n    this.loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append('file', file[0]);\n\n    this.projectService.addDownloadAsContent({ uploadData }).then(assetObject => {\n      console.log(assetObject);\n      this.projectService.fetchContent(rowId).then(payload => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, asset: assetObject, type: type };\n        this.projectService\n          .insertSlot(content, rowId)\n          .then(payload => {\n            console.log(payload);\n            this.displayRows();\n          })\n          .catch(err => console.log(err));\n      });\n    });\n  };\n\n  componentDidMount() {\n    this.displayRows();\n  }\n\n  render() {\n    // const path = this.props.user.activeProject;\n    const path = this.props.match.params.id;\n    const { permissionToEdit } = this.props;\n    const { colorPalette, typeset, textstyles } = this.state;\n\n    return (\n      <div\n        className={`main-content section is-paddingless\t ${this.props.menuIsOpen}`}\n      >\n        <section className='section rows-container is-paddingless\t'>\n          {this.state.rows &&\n            this.state.rows.map((row, rowIdx) => (\n              <div key={row._id} className='columns is-multiline is-marginless'>\n                {row.slots.map((slot, slotIdx) => (\n                  <div\n                    key={slotIdx}\n                    id={`slot-${rowIdx}-${slotIdx}`}\n                    className={`${row.layout} column row slot`}\n                  >\n                    {row.content[slotIdx].type && (\n                      <React.Fragment>\n                        {row.content[slotIdx].type === 'assets' && (\n                          <>\n                            {/* {assets && assets.length > 0 && ( */}\n                              <div className={`assets-container content-container ${row.content[slotIdx].image ? \"has-image\" : \"\"}`}>\n                                {!row.content[slotIdx].image && (\n                                  <Dropzone\n                                    onDrop={acceptedFiles =>\n                                      this.addImageAsContent(\n                                        acceptedFiles,\n                                        row._id,\n                                        slotIdx,\n                                        'assets'\n                                      )\n                                    }\n                                  >\n                                    {({ getRootProps, getInputProps }) => (\n                                      <section class='image-label'>\n                                        <div {...getRootProps()}>\n                                          <input {...getInputProps()} />\n                                          <p>Click to select image</p>\n                                        </div>\n                                      </section>\n                                    )}\n                                  </Dropzone>\n                                )}\n                                {row.content[slotIdx].image && (\n                                  <img\n                                    src={row.content[slotIdx].image}\n                                    alt=''\n                                  />\n                                )}\n                              </div>\n                          </>\n                        )}\n\n                        {row.content[slotIdx].type === 'colorPalette' && (\n                          <>\n                            {colorPalette && colorPalette.length > 0 && (\n                              <div className='color-container content-container'>\n                                {colorPalette.map((color, idx) => (\n                                  <div\n                                    className='color'\n                                    key={idx}\n                                    style={{\n                                      width: 100 / colorPalette.length + '%',\n                                      backgroundColor: color.hexadecimal\n                                    }}\n                                  >\n                                    <span className='color-name vertical-text'>\n                                      {color.name}\n                                    </span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n\n                            {!colorPalette.length && (\n                              <div className='color-container content-container'>\n                                <div class='notification is-info'>\n                                  Add your first color.{' '}\n                                  <a\n                                    href={`/project/${path}/edit/colorPalette/new`}\n                                  >\n                                    New color\n                                  </a>\n                                </div>\n                              </div>\n                            )}\n                          </>\n                        )}\n                        {row.content[slotIdx].type === 'typeset' && (\n                          <>\n                            <div className='field has-addons'>\n                              {typeset && typeset.length > 0 && (\n                                <div className='typeset-container content-container'>\n                                  {typeset.map(type => (\n                                    // <p className='control'>\n                                    //   <button\n                                    //     className='button is-small'\n                                    //     onClick={slodIdx =>\n                                    //       this.addFontAsContent(\n                                    //         row._id,\n                                    //         slotIdx,\n                                    //         'typeset'\n                                    //       )\n                                    //     }\n                                    //     style={{ fontFamily: type.fontFamily }}\n                                    //   >\n                                    //     {type.fontFamily}\n                                    //   </button>\n                                    // </p>\n                                    <React.Fragment>\n                                      <div>{type.fontFamily}</div>\n                                      <div\n                                        style={{ fontFamily: type.fontFamily }}\n                                        className='is-size-3'\n                                      >\n                                        Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm\n                                        Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n                                        0123456789 !\"#$%&/()=?´¨@\n                                      </div>\n                                    </React.Fragment>\n                                  ))}\n                                </div>\n                              )}\n                            </div>\n\n                            {!typeset.length && (\n                              <div className='typeset-container content-container'>\n                                <div class='notification is-info'>\n                                  Add your first type.{' '}\n                                  <a href={`/project/${path}/edit/typeset`}>\n                                    New type\n                                  </a>\n                                </div>\n                              </div>\n                            )}\n                          </>\n                        )}\n\n                        {row.content[slotIdx].type === 'textedit' && (\n                          <div className='content-container textedit-container'>\n                            <TextEditor></TextEditor>\n                          </div>\n                        )}\n\n                        {row.content[slotIdx].type === 'textstyles' && (\n                          <>\n                            {textstyles && (\n                              <div className='type-container content-container'>\n                                {textstyles.map((style, idx) => (\n                                  <div\n                                    className='type'\n                                    key={idx}\n                                    style={{\n                                      fontFamily: style.fontFamily,\n                                      fontWeight: style.fontWeight,\n                                      fontSize: `${style.fontSize}rem`,\n                                      letterSpacing: `${style.letterSpacing}rem`,\n                                      lineHeight: style.lineHeight\n                                    }}\n                                  >\n                                    {style.name}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </>\n                        )}\n\n                        {row.content[slotIdx].type === 'downloads' && (\n                          <>\n                            {/* {assets && assets.length > 0 && ( */}\n                              <div className='download-container content-container'>\n                                {!row.content[slotIdx].asset && (\n                                  <Dropzone\n                                    onDrop={acceptedFiles =>\n                                      this.addDownloadAsContent(\n                                        acceptedFiles,\n                                        row._id,\n                                        slotIdx,\n                                        'downloads'\n                                      )\n                                    }\n                                  >\n                                    {({ getRootProps, getInputProps }) => (\n                                      <section class='file-label'>\n                                        <div {...getRootProps()}>\n                                          <input {...getInputProps()} />\n                                          <p>Click to select file</p>\n                                        </div>\n                                      </section>\n                                    )}\n                                  </Dropzone>\n                                )}\n                                {row.content[slotIdx].asset && (\n                                  // row.content[slotIdx].asset\n                                <a className=\"button\" href={row.content[slotIdx].asset.secure_url} target=\"_blank\" download>Download {row.content[slotIdx].asset.name}</a>\n                                )}\n                              </div>\n                          </>\n                        )}\n                      </React.Fragment>\n                    )}\n\n                    {!row.content[slotIdx].type && (\n                      <React.Fragment>\n                        <div className='content-container'>\n                          <div className='dropdown is-hoverable'>\n                            <div className='dropdown-trigger'>\n                              <button\n                                className='button'\n                                aria-haspopup='true'\n                                aria-controls='dropdown-menu4'\n                              >\n                                <span>Add content</span>\n                                <span className='icon is-small'>\n                                  <img\n                                    src={`${process.env.REACT_APP_URL}/chevron-down.svg`}\n                                  ></img>\n                                </span>\n                              </button>\n                            </div>\n                            <div\n                              className='dropdown-menu'\n                              id='dropdown-menu4'\n                              role='menu'\n                            >\n                              <div className='dropdown-content'>\n                                <div className='dropdown-item'>\n                                  <div>\n                                    <button\n                                    onClick = {() => this.addContentFront(row._id, slotIdx, 'textedit')}\n                                    className='button'\n                                    >\n                                      Text editor\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick = {() => this.addContentFront(row._id, slotIdx, 'colorPalette')}\n                                      className='button'\n                                    >\n                                      Color Palette\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick = {() => this.addContentFront(row._id, slotIdx, 'assets')}\n                                      className='button'\n                                    >\n                                      Image\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick = {() => this.addContentFront(row._id, slotIdx, 'typeset')}\n                                      className='button'\n                                    >\n                                      Typography\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick = {() => this.addContentFront(row._id, slotIdx, 'textstyles')}\n                                      className='button'\n                                    >\n                                      TextStyles\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick = {() => this.addContentFront(row._id, slotIdx, 'downloads')}\n                                      className='button'\n                                    >\n                                      Asset\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </React.Fragment>\n                    )}\n                  </div>\n                ))}\n\n                {permissionToEdit && (\n                  <button\n                    className='close'\n                    onClick={() => this.deleteRow(row._id)}\n                  >\n                    Cerrar\n                  </button>\n                )}\n              </div>\n            ))}\n\n          {permissionToEdit && (\n            <div className='column is-full layout-btn-container'>\n              <p className='header subtitle is-4 is-primary'>Choose layout</p>\n              <div className='inner'>\n                <div\n                  className='layout-btn'\n                  onClick={() => this.addNewRow('is-full')}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/full.svg`}\n                    alt='Row'\n                  ></img>\n                  Full\n                </div>\n\n                <div\n                  className='layout-btn'\n                  onClick={() => this.addNewRow('is-half')}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/half.svg`}\n                    alt='Row'\n                  ></img>\n                  Half\n                </div>\n\n                <div\n                  className='layout-btn'\n                  onClick={() => this.addNewRow('is-one-third')}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/third.svg`}\n                    alt='Row'\n                  ></img>\n                  Third\n                </div>\n\n                <div\n                  className='layout-btn'\n                  onClick={() => this.addNewRow('is-two-thirds-first')}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/two-thirds-first.svg`}\n                    alt='Row'\n                  ></img>\n                  Two Thirds\n                </div>\n\n                <div\n                  className='layout-btn'\n                  onClick={() => this.addNewRow('is-two-thirds-last')}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/two-thirds-last.svg`}\n                    alt='Row'\n                  ></img>\n                  Two Thirds\n                </div>\n              </div>\n            </div>\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js",["148","149","150"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    minWidth: '500px',\n    minHeight: '250px',\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    padding: \"2em 3em\",\n    transform: 'translate(-40%, -50%)',\n    boxShadow: \"0 0 20px  rgba(60,90,195, 0.4)\"\n  }\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n// Modal.setAppElement('#yourAppElement')\n\nexport default class MyModal extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    // this.subtitle.style.color = '#f00';\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    const projectId = this.props.projectId;\n\n    return (\n      <div>\n        <button className=\"button is-primary is-light is-fullwidth\" onClick={this.openModal}>Share this project</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel='Example Modal'\n        >\n          <div>\n          <a class='delete close-modal' onClick={this.closeModal}></a>\n          <h3 className='title is-4'>Share this Brandlink</h3>\n          <form id='contact-form' onSubmit={this.props.sendMessage} method='POST'>\n            \n            <div class='field is-grouped'>\n              <p class='control is-expanded'>\n                <input\n                class=\"input\"\n                  type='email'\n                  id='email'\n                  aria-describedby='emailHelp'\n                  placeholder='Email'\n                ></input>\n              </p>\n              <input\n              type='hidden'\n              name='projectid'\n              id='projectid'\n              value={projectId}\n            />\n              <p class='control'>\n                <button type=\"submit\" class='button is-info'>Send</button>\n              </p>\n            </div>\n          </form>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js",["151","152","153"],"import React, { Component } from 'react';\n\nexport default class Dropdown extends Component {\n  render() {\n    const { row, slotIdx } = this.props;\n    return (\n      <div className='dropdown is-hoverable'>\n        <div className='dropdown-trigger'>\n          <button\n            className='button'\n            aria-haspopup='true'\n            aria-controls='dropdown-menu4'\n          >\n            <span>Add content</span>\n            <span className='icon is-small'>\n              <img src={`${process.env.REACT_APP_URL}/chevron-down.svg`}></img>\n            </span>\n          </button>\n        </div>\n        <div className='dropdown-menu' id='dropdown-menu4' role='menu'>\n          <div className='dropdown-content'>\n            <div className='dropdown-item'>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Text editor\n                </button>\n              </div>\n              <div>\n                <button\n                  onClick={() => this.props.addContent()}\n                  className='button'\n                >\n                  Color Palette\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Image\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Typography display\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Profile.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/hooks/useSetState.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/context/AuthContext.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":243,"column":9,"nodeType":"160","messageId":"161","endLine":243,"endColumn":18},{"ruleId":"162","severity":1,"message":"163","line":258,"column":6,"nodeType":"164","endLine":258,"endColumn":8,"suggestions":"165"},{"ruleId":"158","severity":1,"message":"166","line":68,"column":19,"nodeType":"160","messageId":"161","endLine":68,"endColumn":30},{"ruleId":"158","severity":1,"message":"167","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":16},{"ruleId":"168","severity":1,"message":"169","line":347,"column":33,"nodeType":"170","endLine":347,"endColumn":125},{"ruleId":"171","severity":1,"message":"172","line":367,"column":35,"nodeType":"170","endLine":369,"endColumn":36},{"ruleId":"158","severity":1,"message":"173","line":2,"column":8,"nodeType":"160","messageId":"161","endLine":2,"endColumn":16},{"ruleId":"174","severity":1,"message":"175","line":67,"column":11,"nodeType":"170","endLine":67,"endColumn":67},{"ruleId":"176","severity":1,"message":"177","line":67,"column":11,"nodeType":"170","endLine":67,"endColumn":67},{"ruleId":"158","severity":1,"message":"178","line":5,"column":13,"nodeType":"160","messageId":"161","endLine":5,"endColumn":16},{"ruleId":"158","severity":1,"message":"179","line":5,"column":18,"nodeType":"160","messageId":"161","endLine":5,"endColumn":25},{"ruleId":"171","severity":1,"message":"172","line":16,"column":15,"nodeType":"170","endLine":16,"endColumn":74},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'resetForm' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authService' and 'setLoggedUser'. Either include them or remove the dependency array.","ArrayExpression",["182"],"'hexadecimal' is assigned a value but never used.","'Dropdown' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'row' is assigned a value but never used.","'slotIdx' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},"Update the dependencies array to be: [authService, setLoggedUser]",{"range":"185","text":"186"},[7867,7869],"[authService, setLoggedUser]"]