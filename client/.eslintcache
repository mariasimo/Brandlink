[{"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js":"1","/Users/mariasimo/SideProjects/Brandlink/client/src/App.js":"2","/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js":"3","/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js":"4","/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js":"5","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js":"6","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js":"7","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js":"8","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js":"9","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js":"10","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js":"11","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js":"12","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js":"13","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js":"14","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js":"15","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js":"16","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js":"17","/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js":"18","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js":"19","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js":"20","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js":"21","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js":"22","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js":"23","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js":"24","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js":"25","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js":"26","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js":"27","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js":"28","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login.js":"29","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup.js":"30","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Profile.js":"31","/Users/mariasimo/SideProjects/Brandlink/client/src/hooks/useSetState.js":"32","/Users/mariasimo/SideProjects/Brandlink/client/src/context/ProjectContext.js":"33","/Users/mariasimo/SideProjects/Brandlink/client/src/context/UserContext.js":"34"},{"size":471,"mtime":1612091916646,"results":"35","hashOfConfig":"36"},{"size":10945,"mtime":1612111269442,"results":"37","hashOfConfig":"36"},{"size":1632,"mtime":1612105136094,"results":"38","hashOfConfig":"36"},{"size":6086,"mtime":1612084783760,"results":"39","hashOfConfig":"36"},{"size":468,"mtime":1612109073245,"results":"40","hashOfConfig":"36"},{"size":3847,"mtime":1612111213004,"results":"41","hashOfConfig":"36"},{"size":3030,"mtime":1612110877795,"results":"42","hashOfConfig":"36"},{"size":2214,"mtime":1612088675470,"results":"43","hashOfConfig":"36"},{"size":561,"mtime":1611609614252,"results":"44","hashOfConfig":"36"},{"size":3135,"mtime":1611609614248,"results":"45","hashOfConfig":"36"},{"size":4575,"mtime":1612084783749,"results":"46","hashOfConfig":"36"},{"size":3965,"mtime":1611609614248,"results":"47","hashOfConfig":"36"},{"size":2091,"mtime":1611609614249,"results":"48","hashOfConfig":"36"},{"size":2735,"mtime":1611609614249,"results":"49","hashOfConfig":"36"},{"size":2750,"mtime":1611609614249,"results":"50","hashOfConfig":"36"},{"size":7593,"mtime":1612084783749,"results":"51","hashOfConfig":"36"},{"size":1842,"mtime":1612111297328,"results":"52","hashOfConfig":"36"},{"size":6641,"mtime":1611616053049,"results":"53","hashOfConfig":"36"},{"size":835,"mtime":1612085122547,"results":"54","hashOfConfig":"36"},{"size":1147,"mtime":1612085122547,"results":"55","hashOfConfig":"36"},{"size":963,"mtime":1612110779353,"results":"56","hashOfConfig":"36"},{"size":45114,"mtime":1612092556746,"results":"57","hashOfConfig":"36"},{"size":959,"mtime":1611609614250,"results":"58","hashOfConfig":"36"},{"size":1101,"mtime":1611609614253,"results":"59","hashOfConfig":"36"},{"size":2156,"mtime":1611609614252,"results":"60","hashOfConfig":"36"},{"size":2583,"mtime":1611609614253,"results":"61","hashOfConfig":"36"},{"size":1670,"mtime":1611609614253,"results":"62","hashOfConfig":"36"},{"size":1579,"mtime":1611609614252,"results":"63","hashOfConfig":"36"},{"size":2724,"mtime":1612108644898,"results":"64","hashOfConfig":"36"},{"size":2775,"mtime":1612107623775,"results":"65","hashOfConfig":"36"},{"size":2215,"mtime":1612107522110,"results":"66","hashOfConfig":"36"},{"size":376,"mtime":1612084783755,"results":"67","hashOfConfig":"36"},{"size":1350,"mtime":1612091763160,"results":"68","hashOfConfig":"36"},{"size":4602,"mtime":1612110954011,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1wd42be",{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"89"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js",[],["145","146"],"/Users/mariasimo/SideProjects/Brandlink/client/src/App.js",["147","148","149"],"/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js",[],["150","151"],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js",["152"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\nimport { TwitterPicker } from \"react-color\";\n\nexport default class NewColor extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = new ProjectService();\n\n    this.state = {\n      name: \"\",\n      hexadecimal: \"\",\n      colorPalette: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getColorData();\n  }\n\n  getColorData = () => {\n    const { colorId } = this.props.match.params;\n\n    if (colorId !== undefined) {\n      this.projectService.getColorData(colorId).then(\n        (colorData) => {\n          let color = colorData.colorPalette.filter(\n            (color) => color._id === colorId\n          );\n          this.setState({\n            ...this.state,\n            name: color[0].name,\n            hexadecimal: color[0].hexadecimal,\n          });\n        },\n        (error) => {\n          const { message } = error;\n          console.error(message);\n        }\n      );\n    }\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ ...this.state, [name]: value });\n  };\n\n  handleChangeComplete = (color) => {\n    this.setState({ hexadecimal: color.hex });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, hexadecimal } = this.state;\n    const { id, colorId } = this.props.match.params;\n    const { history } = this.props;\n    this.props.addColorToPalette({ name, hexadecimal, id, colorId, history });\n  };\n\n  render() {\n    const { name, hexadecimal } = this.state;\n    const { colorId, id } = this.props.match.params;\n    const { colorPalette, typeset, assets } = this.props;\n\n    return (\n      <>\n        <SideMenu\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n        >\n          {colorId && (\n            <BrandHeader\n              title=\"Edit color\"\n              subtitle=\"Color Palette\"\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n          {!colorId && (\n            <BrandHeader\n              title=\"New color\"\n              subtitle=\"Color Palette\"\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label htmlFor=\"title\" className=\"label\">\n                Name:\n              </label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  className=\"input\"\n                  value={name}\n                  placeholder=\"Introduce a name for your color\"\n                  onChange={this.handleChange}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"path\" className=\"label\">\n                Hexadecimal:\n              </label>\n              <div className=\"control\">\n                {/* <input\n                type=\"text\"\n                name=\"hexadecimal\"\n                className=\"input\"\n                value={hexadecimal}\n                placeholder=\"Introduce the url for your project\"\n                onChange={this.handleChange}\n                required\n              /> */}\n                <TwitterPicker\n                  color={this.state.background}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </div>\n            </div>\n\n            <div className=\"control\">\n              {!colorId && (\n                <input\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  value=\"Save Color\"\n                ></input>\n              )}\n\n              {colorId && (\n                <input\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  value=\"Edit Color\"\n                ></input>\n              )}\n            </div>\n          </form>\n        </SideMenu>\n        <MainContent\n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          user={this.props.loggedInUser}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          assets={assets}\n          permissionToEdit\n        ></MainContent>\n      </>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js",["153","154","155","156","157"],"import React, { useEffect, useState } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\nimport Dropzone from \"react-dropzone\";\nimport TextEditor from \"../utils/TextEditor\";\nimport { useUserState } from \"../../context/UserContext\";\n\nconst projectService = new ProjectService();\n\nconst MainContent = ({ menuIsOpen, permissionToEdit, ...props }) => {\n  const [state, setState] = useState({});\n  const user = useUserState();\n\n  const displayRows = () => {\n    projectService.displayRows(user.activeProject).then((projectData) => {\n      const { rows, colorPalette, typeset, textstyles } = projectData;\n\n      setState(\n        {\n          ...state,\n          rows: rows,\n          colorPalette: colorPalette,\n          typeset: typeset,\n          textstyles: textstyles,\n        },\n        () => {\n          console.log(state.rows);\n        }\n      );\n    });\n  };\n\n  const addNewRow = (layout) => {\n    const userId = user.id;\n    projectService.createNewRow({ layout, userId }).then(\n      (projectWithRowAdded) => {\n        setState({\n          ...state,\n          rows: projectWithRowAdded.rows,\n        });\n      },\n      (error) => console.log(error)\n    );\n  };\n\n  const deleteRow = (rowId) => {\n    projectService.deleteRow(rowId).then(\n      (project) => {\n        displayRows();\n      },\n      (error) => {\n        const { message } = error;\n        console.error(message);\n      }\n    );\n  };\n\n  const addContent = (rowId, slotIdx, type) => {\n    projectService.addContent({ rowId, slotIdx, type }).then((payload) => {\n      displayRows();\n    });\n  };\n\n  const addContentFront = (rowId, slotIdx, type) => {\n    projectService.fetchContent(rowId).then((payload) => {\n      let content = payload;\n\n      content[slotIdx] = { order: slotIdx, type: type };\n\n      projectService\n        .insertSlot(content, rowId)\n        .then((payload) => displayRows())\n        .catch((err) => console.log(err));\n    });\n  };\n\n  const addFontAsContent = (rowId, slotIdx, type) => {\n    projectService\n      .addFontAsContent({ rowId, slotIdx, type })\n      .then((payload) => {\n        console.log(payload);\n        // this.displayRows();\n      });\n  };\n\n  const addImageAsContent = (file, rowId, slotIdx, type) => {\n    const loadingImg = document.createElement(\"img\");\n    loadingImg.setAttribute(\"src\", \"/loading.svg\");\n    const loadingParent = document.querySelector(\".image-label\");\n    loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append(\"file\", file[0]);\n\n    projectService.addImageAsContent({ uploadData }).then((imageURl) => {\n      let image = imageURl;\n      projectService.fetchContent(rowId).then((payload) => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, image: image, type: type };\n        projectService\n          .insertSlot(content, rowId)\n          .then((payload) => {\n            console.log(payload);\n            displayRows();\n          })\n          .catch((err) => console.log(err));\n      });\n    });\n  };\n\n  const addDownloadAsContent = (file, rowId, slotIdx, type) => {\n    const loadingImg = document.createElement(\"img\");\n    loadingImg.setAttribute(\"src\", \"/loading.svg\");\n    const loadingParent = document.querySelector(\".file-label\");\n    loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append(\"file\", file[0]);\n\n    projectService.addDownloadAsContent({ uploadData }).then((assetObject) => {\n      console.log(assetObject);\n      projectService.fetchContent(rowId).then((payload) => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, asset: assetObject, type: type };\n        projectService\n          .insertSlot(content, rowId)\n          .then((payload) => {\n            console.log(payload);\n            displayRows();\n          })\n          .catch((err) => console.log(err));\n      });\n    });\n  };\n\n  useEffect(() => {\n    displayRows();\n  }, []);\n\n  const path = props.match.params.id;\n  const { colorPalette, typeset, textstyles } = state;\n\n  return (\n    <div className={`main-content section is-paddingless\t ${menuIsOpen}`}>\n      <section className=\"section rows-container is-paddingless\t\">\n        {state.rows &&\n          state.rows.map((row, rowIdx) => (\n            <div key={row._id} className=\"columns is-multiline is-marginless\">\n              {row.slots.map((slot, slotIdx) => (\n                <div\n                  key={slotIdx}\n                  id={`slot-${rowIdx}-${slotIdx}`}\n                  className={`${row.layout} column row slot`}\n                >\n                  {row.content[slotIdx].type && (\n                    <React.Fragment>\n                      {row.content[slotIdx].type === \"assets\" && (\n                        <>\n                          {/* {assets && assets.length > 0 && ( */}\n                          <div\n                            className={`assets-container content-container ${\n                              row.content[slotIdx].image ? \"has-image\" : \"\"\n                            }`}\n                          >\n                            {!row.content[slotIdx].image && (\n                              <Dropzone\n                                onDrop={(acceptedFiles) =>\n                                  addImageAsContent(\n                                    acceptedFiles,\n                                    row._id,\n                                    slotIdx,\n                                    \"assets\"\n                                  )\n                                }\n                              >\n                                {({ getRootProps, getInputProps }) => (\n                                  <section class=\"image-label\">\n                                    <div {...getRootProps()}>\n                                      <input {...getInputProps()} />\n                                      <p>Click to select image</p>\n                                    </div>\n                                  </section>\n                                )}\n                              </Dropzone>\n                            )}\n                            {row.content[slotIdx].image && (\n                              <img src={row.content[slotIdx].image} alt=\"\" />\n                            )}\n                          </div>\n                        </>\n                      )}\n\n                      {row.content[slotIdx].type === \"colorPalette\" && (\n                        <>\n                          {colorPalette && colorPalette.length > 0 && (\n                            <div className=\"color-container content-container\">\n                              {colorPalette.map((color, idx) => (\n                                <div\n                                  className=\"color\"\n                                  key={idx}\n                                  style={{\n                                    width: 100 / colorPalette.length + \"%\",\n                                    backgroundColor: color.hexadecimal,\n                                  }}\n                                >\n                                  <span className=\"color-name vertical-text\">\n                                    {color.name}\n                                  </span>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n\n                          {!colorPalette.length && (\n                            <div className=\"color-container content-container\">\n                              <div class=\"notification is-info\">\n                                Add your first color.{\" \"}\n                                <a\n                                  href={`/project/${user.activeProject}/edit/colorPalette/new`}\n                                >\n                                  New color\n                                </a>\n                              </div>\n                            </div>\n                          )}\n                        </>\n                      )}\n                      {row.content[slotIdx].type === \"typeset\" && (\n                        <>\n                          <div className=\"field has-addons\">\n                            {typeset && typeset.length > 0 && (\n                              <div className=\"typeset-container content-container\">\n                                {typeset.map((type) => (\n                                  // <p className='control'>\n                                  //   <button\n                                  //     className='button is-small'\n                                  //     onClick={slodIdx =>\n                                  //       addFontAsContent(\n                                  //         row._id,\n                                  //         slotIdx,\n                                  //         'typeset'\n                                  //       )\n                                  //     }\n                                  //     style={{ fontFamily: type.fontFamily }}\n                                  //   >\n                                  //     {type.fontFamily}\n                                  //   </button>\n                                  // </p>\n                                  <React.Fragment>\n                                    <div>{type.fontFamily}</div>\n                                    <div\n                                      style={{ fontFamily: type.fontFamily }}\n                                      className=\"is-size-3\"\n                                    >\n                                      Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn\n                                      Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n                                      0123456789 !\"#$%&/()=?´¨@\n                                    </div>\n                                  </React.Fragment>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n\n                          {!typeset.length && (\n                            <div className=\"typeset-container content-container\">\n                              <div class=\"notification is-info\">\n                                Add your first type.{\" \"}\n                                <a href={`/project/${path}/edit/typeset`}>\n                                  New type\n                                </a>\n                              </div>\n                            </div>\n                          )}\n                        </>\n                      )}\n\n                      {row.content[slotIdx].type === \"textedit\" && (\n                        <div className=\"content-container textedit-container\">\n                          <TextEditor></TextEditor>\n                        </div>\n                      )}\n\n                      {row.content[slotIdx].type === \"textstyles\" && (\n                        <>\n                          {textstyles && (\n                            <div className=\"type-container content-container\">\n                              {textstyles.map((style, idx) => (\n                                <div\n                                  className=\"type\"\n                                  key={idx}\n                                  style={{\n                                    fontFamily: style.fontFamily,\n                                    fontWeight: style.fontWeight,\n                                    fontSize: `${style.fontSize}rem`,\n                                    letterSpacing: `${style.letterSpacing}rem`,\n                                    lineHeight: style.lineHeight,\n                                  }}\n                                >\n                                  {style.name}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </>\n                      )}\n\n                      {row.content[slotIdx].type === \"downloads\" && (\n                        <>\n                          {/* {assets && assets.length > 0 && ( */}\n                          <div className=\"download-container content-container\">\n                            {!row.content[slotIdx].asset && (\n                              <Dropzone\n                                onDrop={(acceptedFiles) =>\n                                  addDownloadAsContent(\n                                    acceptedFiles,\n                                    row._id,\n                                    slotIdx,\n                                    \"downloads\"\n                                  )\n                                }\n                              >\n                                {({ getRootProps, getInputProps }) => (\n                                  <section class=\"file-label\">\n                                    <div {...getRootProps()}>\n                                      <input {...getInputProps()} />\n                                      <p>Click to select file</p>\n                                    </div>\n                                  </section>\n                                )}\n                              </Dropzone>\n                            )}\n                            {row.content[slotIdx].asset && (\n                              // row.content[slotIdx].asset\n                              <a\n                                className=\"button\"\n                                href={row.content[slotIdx].asset.secure_url}\n                                target=\"_blank\"\n                                download\n                              >\n                                Download {row.content[slotIdx].asset.name}\n                              </a>\n                            )}\n                          </div>\n                        </>\n                      )}\n                    </React.Fragment>\n                  )}\n\n                  {!row.content[slotIdx].type && (\n                    <React.Fragment>\n                      <div className=\"content-container\">\n                        <div className=\"dropdown is-hoverable\">\n                          <div className=\"dropdown-trigger\">\n                            <button\n                              className=\"button\"\n                              aria-haspopup=\"true\"\n                              aria-controls=\"dropdown-menu4\"\n                            >\n                              <span>Add content</span>\n                              <span className=\"icon is-small\">\n                                <img\n                                  src={`${process.env.REACT_APP_URL}/chevron-down.svg`}\n                                ></img>\n                              </span>\n                            </button>\n                          </div>\n                          <div\n                            className=\"dropdown-menu\"\n                            id=\"dropdown-menu4\"\n                            role=\"menu\"\n                          >\n                            <div className=\"dropdown-content\">\n                              <div className=\"dropdown-item\">\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"textedit\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Text editor\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"colorPalette\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Color Palette\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"assets\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Image\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"typeset\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Typography\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"textstyles\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    TextStyles\n                                  </button>\n                                </div>\n                                <div>\n                                  <button\n                                    onClick={() =>\n                                      addContentFront(\n                                        row._id,\n                                        slotIdx,\n                                        \"downloads\"\n                                      )\n                                    }\n                                    className=\"button\"\n                                  >\n                                    Asset\n                                  </button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </React.Fragment>\n                  )}\n                </div>\n              ))}\n\n              {permissionToEdit && (\n                <button className=\"close\" onClick={() => deleteRow(row._id)}>\n                  Cerrar\n                </button>\n              )}\n            </div>\n          ))}\n\n        {permissionToEdit && (\n          <div className=\"column is-full layout-btn-container\">\n            <p className=\"header subtitle is-4 is-primary\">Choose layout</p>\n            <div className=\"inner\">\n              <div className=\"layout-btn\" onClick={() => addNewRow(\"is-full\")}>\n                <img\n                  src={`${process.env.REACT_APP_URL}/full.svg`}\n                  alt=\"Row\"\n                ></img>\n                Full\n              </div>\n\n              <div className=\"layout-btn\" onClick={() => addNewRow(\"is-half\")}>\n                <img\n                  src={`${process.env.REACT_APP_URL}/half.svg`}\n                  alt=\"Row\"\n                ></img>\n                Half\n              </div>\n\n              <div\n                className=\"layout-btn\"\n                onClick={() => addNewRow(\"is-one-third\")}\n              >\n                <img\n                  src={`${process.env.REACT_APP_URL}/third.svg`}\n                  alt=\"Row\"\n                ></img>\n                Third\n              </div>\n\n              <div\n                className=\"layout-btn\"\n                onClick={() => addNewRow(\"is-two-thirds-first\")}\n              >\n                <img\n                  src={`${process.env.REACT_APP_URL}/two-thirds-first.svg`}\n                  alt=\"Row\"\n                ></img>\n                Two Thirds\n              </div>\n\n              <div\n                className=\"layout-btn\"\n                onClick={() => addNewRow(\"is-two-thirds-last\")}\n              >\n                <img\n                  src={`${process.env.REACT_APP_URL}/two-thirds-last.svg`}\n                  alt=\"Row\"\n                ></img>\n                Two Thirds\n              </div>\n            </div>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default MainContent;\n// export default class MainContent extends Component {\n//   constructor(props) {\n//     super(props);\n//     state = {};\n//     projectService = new ProjectService();\n//     loadingImg = \"\";\n//     this.loadingParent = \"\";\n//   }\n\n//   displayRows = () => {\n//     const { id } = this.props.match.params;\n\n//     this.projectService.displayRows(id).then((projectData) => {\n//       const { rows, colorPalette, typeset, textstyles } = projectData;\n//       this.setState(\n//         {\n//           ...this.state,\n//           rows: rows,\n//           colorPalette: colorPalette,\n//           typeset: typeset,\n//           textstyles: textstyles,\n//         },\n//         () => {\n//           console.log(this.state.rows);\n//         }\n//       );\n//     });\n//   };\n\n//   addNewRow = (layout) => {\n//     const userId = this.props.user.id;\n//     this.projectService.createNewRow({ layout, userId }).then(\n//       (projectWithRowAdded) => {\n//         this.setState({\n//           ...this.state,\n//           rows: projectWithRowAdded.rows,\n//         });\n//       },\n//       (error) => console.log(error)\n//     );\n//   };\n\n//   deleteRow = (rowId) => {\n//     this.projectService.deleteRow(rowId).then(\n//       (project) => {\n//         this.displayRows();\n//       },\n//       (error) => {\n//         const { message } = error;\n//         console.error(message);\n//       }\n//     );\n//   };\n\n//   addContent = (rowId, slotIdx, type) => {\n//     this.projectService.addContent({ rowId, slotIdx, type }).then((payload) => {\n//       this.displayRows();\n//     });\n//   };\n\n//   addContentFront = (rowId, slotIdx, type) => {\n//     this.projectService.fetchContent(rowId).then((payload) => {\n//       let content = payload;\n\n//       content[slotIdx] = { order: slotIdx, type: type };\n\n//       this.projectService\n//         .insertSlot(content, rowId)\n//         .then((payload) => this.displayRows())\n//         .catch((err) => console.log(err));\n//     });\n//   };\n\n//   addFontAsContent = (rowId, slotIdx, type) => {\n//     this.projectService\n//       .addFontAsContent({ rowId, slotIdx, type })\n//       .then((payload) => {\n//         console.log(payload);\n//         // this.displayRows();\n//       });\n//   };\n\n//   addImageAsContent = (file, rowId, slotIdx, type) => {\n//     this.loadingImg = document.createElement(\"img\");\n//     this.loadingImg.setAttribute(\"src\", \"/loading.svg\");\n//     this.loadingParent = document.querySelector(\".image-label\");\n//     this.loadingParent.appendChild(this.loadingImg);\n\n//     const uploadData = new FormData();\n//     uploadData.append(\"file\", file[0]);\n\n//     this.projectService.addImageAsContent({ uploadData }).then((imageURl) => {\n//       let image = imageURl;\n//       this.projectService.fetchContent(rowId).then((payload) => {\n//         let content = payload;\n//         content[slotIdx] = { order: slotIdx, image: image, type: type };\n//         this.projectService\n//           .insertSlot(content, rowId)\n//           .then((payload) => {\n//             console.log(payload);\n//             this.displayRows();\n//           })\n//           .catch((err) => console.log(err));\n//       });\n//     });\n//   };\n\n//   addDownloadAsContent = (file, rowId, slotIdx, type) => {\n//     this.loadingImg = document.createElement(\"img\");\n//     this.loadingImg.setAttribute(\"src\", \"/loading.svg\");\n//     this.loadingParent = document.querySelector(\".file-label\");\n//     this.loadingParent.appendChild(this.loadingImg);\n\n//     const uploadData = new FormData();\n//     uploadData.append(\"file\", file[0]);\n\n//     this.projectService\n//       .addDownloadAsContent({ uploadData })\n//       .then((assetObject) => {\n//         console.log(assetObject);\n//         this.projectService.fetchContent(rowId).then((payload) => {\n//           let content = payload;\n//           content[slotIdx] = { order: slotIdx, asset: assetObject, type: type };\n//           this.projectService\n//             .insertSlot(content, rowId)\n//             .then((payload) => {\n//               console.log(payload);\n//               this.displayRows();\n//             })\n//             .catch((err) => console.log(err));\n//         });\n//       });\n//   };\n\n//   componentDidMount() {\n//     this.displayRows();\n//   }\n\n//   render() {\n//     // const path = this.props.user.activeProject;\n//     const path = this.props.match.params.id;\n//     const { permissionToEdit } = this.props;\n//     const { colorPalette, typeset, textstyles } = this.state;\n\n//     return (\n//       <div\n//         className={`main-content section is-paddingless\t ${this.props.menuIsOpen}`}\n//       >\n//         <section className=\"section rows-container is-paddingless\t\">\n//           {this.state.rows &&\n//             this.state.rows.map((row, rowIdx) => (\n//               <div key={row._id} className=\"columns is-multiline is-marginless\">\n//                 {row.slots.map((slot, slotIdx) => (\n//                   <div\n//                     key={slotIdx}\n//                     id={`slot-${rowIdx}-${slotIdx}`}\n//                     className={`${row.layout} column row slot`}\n//                   >\n//                     {row.content[slotIdx].type && (\n//                       <React.Fragment>\n//                         {row.content[slotIdx].type === \"assets\" && (\n//                           <>\n//                             {/* {assets && assets.length > 0 && ( */}\n//                             <div\n//                               className={`assets-container content-container ${\n//                                 row.content[slotIdx].image ? \"has-image\" : \"\"\n//                               }`}\n//                             >\n//                               {!row.content[slotIdx].image && (\n//                                 <Dropzone\n//                                   onDrop={(acceptedFiles) =>\n//                                     this.addImageAsContent(\n//                                       acceptedFiles,\n//                                       row._id,\n//                                       slotIdx,\n//                                       \"assets\"\n//                                     )\n//                                   }\n//                                 >\n//                                   {({ getRootProps, getInputProps }) => (\n//                                     <section class=\"image-label\">\n//                                       <div {...getRootProps()}>\n//                                         <input {...getInputProps()} />\n//                                         <p>Click to select image</p>\n//                                       </div>\n//                                     </section>\n//                                   )}\n//                                 </Dropzone>\n//                               )}\n//                               {row.content[slotIdx].image && (\n//                                 <img src={row.content[slotIdx].image} alt=\"\" />\n//                               )}\n//                             </div>\n//                           </>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"colorPalette\" && (\n//                           <>\n//                             {colorPalette && colorPalette.length > 0 && (\n//                               <div className=\"color-container content-container\">\n//                                 {colorPalette.map((color, idx) => (\n//                                   <div\n//                                     className=\"color\"\n//                                     key={idx}\n//                                     style={{\n//                                       width: 100 / colorPalette.length + \"%\",\n//                                       backgroundColor: color.hexadecimal,\n//                                     }}\n//                                   >\n//                                     <span className=\"color-name vertical-text\">\n//                                       {color.name}\n//                                     </span>\n//                                   </div>\n//                                 ))}\n//                               </div>\n//                             )}\n\n//                             {!colorPalette.length && (\n//                               <div className=\"color-container content-container\">\n//                                 <div class=\"notification is-info\">\n//                                   Add your first color.{\" \"}\n//                                   <a\n//                                     href={`/project/${path}/edit/colorPalette/new`}\n//                                   >\n//                                     New color\n//                                   </a>\n//                                 </div>\n//                               </div>\n//                             )}\n//                           </>\n//                         )}\n//                         {row.content[slotIdx].type === \"typeset\" && (\n//                           <>\n//                             <div className=\"field has-addons\">\n//                               {typeset && typeset.length > 0 && (\n//                                 <div className=\"typeset-container content-container\">\n//                                   {typeset.map((type) => (\n//                                     // <p className='control'>\n//                                     //   <button\n//                                     //     className='button is-small'\n//                                     //     onClick={slodIdx =>\n//                                     //       this.addFontAsContent(\n//                                     //         row._id,\n//                                     //         slotIdx,\n//                                     //         'typeset'\n//                                     //       )\n//                                     //     }\n//                                     //     style={{ fontFamily: type.fontFamily }}\n//                                     //   >\n//                                     //     {type.fontFamily}\n//                                     //   </button>\n//                                     // </p>\n//                                     <React.Fragment>\n//                                       <div>{type.fontFamily}</div>\n//                                       <div\n//                                         style={{ fontFamily: type.fontFamily }}\n//                                         className=\"is-size-3\"\n//                                       >\n//                                         Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm\n//                                         Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n//                                         0123456789 !\"#$%&/()=?´¨@\n//                                       </div>\n//                                     </React.Fragment>\n//                                   ))}\n//                                 </div>\n//                               )}\n//                             </div>\n\n//                             {!typeset.length && (\n//                               <div className=\"typeset-container content-container\">\n//                                 <div class=\"notification is-info\">\n//                                   Add your first type.{\" \"}\n//                                   <a href={`/project/${path}/edit/typeset`}>\n//                                     New type\n//                                   </a>\n//                                 </div>\n//                               </div>\n//                             )}\n//                           </>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"textedit\" && (\n//                           <div className=\"content-container textedit-container\">\n//                             <TextEditor></TextEditor>\n//                           </div>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"textstyles\" && (\n//                           <>\n//                             {textstyles && (\n//                               <div className=\"type-container content-container\">\n//                                 {textstyles.map((style, idx) => (\n//                                   <div\n//                                     className=\"type\"\n//                                     key={idx}\n//                                     style={{\n//                                       fontFamily: style.fontFamily,\n//                                       fontWeight: style.fontWeight,\n//                                       fontSize: `${style.fontSize}rem`,\n//                                       letterSpacing: `${style.letterSpacing}rem`,\n//                                       lineHeight: style.lineHeight,\n//                                     }}\n//                                   >\n//                                     {style.name}\n//                                   </div>\n//                                 ))}\n//                               </div>\n//                             )}\n//                           </>\n//                         )}\n\n//                         {row.content[slotIdx].type === \"downloads\" && (\n//                           <>\n//                             {/* {assets && assets.length > 0 && ( */}\n//                             <div className=\"download-container content-container\">\n//                               {!row.content[slotIdx].asset && (\n//                                 <Dropzone\n//                                   onDrop={(acceptedFiles) =>\n//                                     this.addDownloadAsContent(\n//                                       acceptedFiles,\n//                                       row._id,\n//                                       slotIdx,\n//                                       \"downloads\"\n//                                     )\n//                                   }\n//                                 >\n//                                   {({ getRootProps, getInputProps }) => (\n//                                     <section class=\"file-label\">\n//                                       <div {...getRootProps()}>\n//                                         <input {...getInputProps()} />\n//                                         <p>Click to select file</p>\n//                                       </div>\n//                                     </section>\n//                                   )}\n//                                 </Dropzone>\n//                               )}\n//                               {row.content[slotIdx].asset && (\n//                                 // row.content[slotIdx].asset\n//                                 <a\n//                                   className=\"button\"\n//                                   href={row.content[slotIdx].asset.secure_url}\n//                                   target=\"_blank\"\n//                                   download\n//                                 >\n//                                   Download {row.content[slotIdx].asset.name}\n//                                 </a>\n//                               )}\n//                             </div>\n//                           </>\n//                         )}\n//                       </React.Fragment>\n//                     )}\n\n//                     {!row.content[slotIdx].type && (\n//                       <React.Fragment>\n//                         <div className=\"content-container\">\n//                           <div className=\"dropdown is-hoverable\">\n//                             <div className=\"dropdown-trigger\">\n//                               <button\n//                                 className=\"button\"\n//                                 aria-haspopup=\"true\"\n//                                 aria-controls=\"dropdown-menu4\"\n//                               >\n//                                 <span>Add content</span>\n//                                 <span className=\"icon is-small\">\n//                                   <img\n//                                     src={`${process.env.REACT_APP_URL}/chevron-down.svg`}\n//                                   ></img>\n//                                 </span>\n//                               </button>\n//                             </div>\n//                             <div\n//                               className=\"dropdown-menu\"\n//                               id=\"dropdown-menu4\"\n//                               role=\"menu\"\n//                             >\n//                               <div className=\"dropdown-content\">\n//                                 <div className=\"dropdown-item\">\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"textedit\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Text editor\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"colorPalette\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Color Palette\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"assets\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Image\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"typeset\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Typography\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"textstyles\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       TextStyles\n//                                     </button>\n//                                   </div>\n//                                   <div>\n//                                     <button\n//                                       onClick={() =>\n//                                         this.addContentFront(\n//                                           row._id,\n//                                           slotIdx,\n//                                           \"downloads\"\n//                                         )\n//                                       }\n//                                       className=\"button\"\n//                                     >\n//                                       Asset\n//                                     </button>\n//                                   </div>\n//                                 </div>\n//                               </div>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </React.Fragment>\n//                     )}\n//                   </div>\n//                 ))}\n\n//                 {permissionToEdit && (\n//                   <button\n//                     className=\"close\"\n//                     onClick={() => this.deleteRow(row._id)}\n//                   >\n//                     Cerrar\n//                   </button>\n//                 )}\n//               </div>\n//             ))}\n\n//           {permissionToEdit && (\n//             <div className=\"column is-full layout-btn-container\">\n//               <p className=\"header subtitle is-4 is-primary\">Choose layout</p>\n//               <div className=\"inner\">\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-full\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/full.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Full\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-half\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/half.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Half\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-one-third\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/third.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Third\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-two-thirds-first\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/two-thirds-first.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Two Thirds\n//                 </div>\n\n//                 <div\n//                   className=\"layout-btn\"\n//                   onClick={() => this.addNewRow(\"is-two-thirds-last\")}\n//                 >\n//                   <img\n//                     src={`${process.env.REACT_APP_URL}/two-thirds-last.svg`}\n//                     alt=\"Row\"\n//                   ></img>\n//                   Two Thirds\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </section>\n//       </div>\n//     );\n//   }\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js",["158","159","160"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    minWidth: '500px',\n    minHeight: '250px',\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    padding: \"2em 3em\",\n    transform: 'translate(-40%, -50%)',\n    boxShadow: \"0 0 20px  rgba(60,90,195, 0.4)\"\n  }\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n// Modal.setAppElement('#yourAppElement')\n\nexport default class MyModal extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    // this.subtitle.style.color = '#f00';\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    const projectId = this.props.projectId;\n\n    return (\n      <div>\n        <button className=\"button is-primary is-light is-fullwidth\" onClick={this.openModal}>Share this project</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel='Example Modal'\n        >\n          <div>\n          <a class='delete close-modal' onClick={this.closeModal}></a>\n          <h3 className='title is-4'>Share this Brandlink</h3>\n          <form id='contact-form' onSubmit={this.props.sendMessage} method='POST'>\n            \n            <div class='field is-grouped'>\n              <p class='control is-expanded'>\n                <input\n                class=\"input\"\n                  type='email'\n                  id='email'\n                  aria-describedby='emailHelp'\n                  placeholder='Email'\n                ></input>\n              </p>\n              <input\n              type='hidden'\n              name='projectid'\n              id='projectid'\n              value={projectId}\n            />\n              <p class='control'>\n                <button type=\"submit\" class='button is-info'>Send</button>\n              </p>\n            </div>\n          </form>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js",["161","162","163"],"import React, { Component } from 'react';\n\nexport default class Dropdown extends Component {\n  render() {\n    const { row, slotIdx } = this.props;\n    return (\n      <div className='dropdown is-hoverable'>\n        <div className='dropdown-trigger'>\n          <button\n            className='button'\n            aria-haspopup='true'\n            aria-controls='dropdown-menu4'\n          >\n            <span>Add content</span>\n            <span className='icon is-small'>\n              <img src={`${process.env.REACT_APP_URL}/chevron-down.svg`}></img>\n            </span>\n          </button>\n        </div>\n        <div className='dropdown-menu' id='dropdown-menu4' role='menu'>\n          <div className='dropdown-content'>\n            <div className='dropdown-item'>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Text editor\n                </button>\n              </div>\n              <div>\n                <button\n                  onClick={() => this.props.addContent()}\n                  className='button'\n                >\n                  Color Palette\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Image\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Typography display\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Profile.js",["164"],"import React, { useEffect, useState } from \"react\";\nimport { useUserActions, useUserState } from \"../../context/UserContext\";\nimport AuthService from \"../../services/AuthService\";\n\nconst authService = new AuthService();\n\nconst Profile = () => {\n  const { user } = useUserState();\n  const { setAuthUser } = useUserActions();\n  const [uploadedPicture, setUploadedPicture] = useState();\n  const fallbackPicture = \"https://i.stack.imgur.com/l60Hf.png\";\n\n  useEffect(() => {\n    const updateUser = () => {\n      if (uploadedPicture) {\n        authService\n          .edit({ id: user.id, picture: uploadedPicture })\n          .then((updateUser) => setAuthUser(updateUser));\n      }\n    };\n    updateUser();\n  }, [uploadedPicture, user.id]);\n\n  const handleUpload = (e) => {\n    const uploadData = new FormData();\n    uploadData.append(\"picture\", e.target.files[0]);\n    authService.upload(uploadData).then(\n      (data) => setUploadedPicture(data.secure_url),\n      (error) => console.error(error)\n    );\n  };\n\n  return (\n    <div className=\"column\">\n      <section className=\"section landing\">\n        <div className=\"columns\">\n          <div className=\"column is-one-third\">\n            <div className=\"hero\">\n              <h2 className=\"title is-3\">User details</h2>\n\n              <p>\n                Username: <span className=\"strong\">{user.username}</span>\n                <button className=\"button is-small is-rounded\">\n                  Edit username\n                </button>\n              </p>\n              <p>\n                Password:\n                <button className=\"button is-small is-rounded\">\n                  Edit password\n                </button>\n              </p>\n            </div>\n          </div>\n          <div className=\"column is-two-thirds projects-wrapper\">\n            <div>\n              <div\n                className=\"is-rounded profile-picture\"\n                style={{\n                  backgroundImage: `url(${user.picture || fallbackPicture})`,\n                }}\n              ></div>\n\n              <input type=\"file\" name=\"picture\" onChange={handleUpload}></input>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Profile;\n","/Users/mariasimo/SideProjects/Brandlink/client/src/hooks/useSetState.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/context/ProjectContext.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/context/UserContext.js",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":1,"column":17,"nodeType":"171","messageId":"172","endLine":1,"endColumn":26},{"ruleId":"169","severity":1,"message":"173","line":4,"column":8,"nodeType":"171","messageId":"172","endLine":4,"endColumn":19},{"ruleId":"169","severity":1,"message":"174","line":20,"column":8,"nodeType":"171","messageId":"172","endLine":20,"endColumn":22},{"ruleId":"165","replacedBy":"175"},{"ruleId":"167","replacedBy":"176"},{"ruleId":"169","severity":1,"message":"177","line":65,"column":19,"nodeType":"171","messageId":"172","endLine":65,"endColumn":30},{"ruleId":"169","severity":1,"message":"178","line":57,"column":9,"nodeType":"171","messageId":"172","endLine":57,"endColumn":19},{"ruleId":"169","severity":1,"message":"179","line":76,"column":9,"nodeType":"171","messageId":"172","endLine":76,"endColumn":25},{"ruleId":"180","severity":1,"message":"181","line":137,"column":6,"nodeType":"182","endLine":137,"endColumn":8,"suggestions":"183"},{"ruleId":"184","severity":1,"message":"185","line":334,"column":31,"nodeType":"186","endLine":339,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":361,"column":33,"nodeType":"186","endLine":363,"endColumn":34},{"ruleId":"169","severity":1,"message":"189","line":2,"column":8,"nodeType":"171","messageId":"172","endLine":2,"endColumn":16},{"ruleId":"190","severity":1,"message":"191","line":67,"column":11,"nodeType":"186","endLine":67,"endColumn":67},{"ruleId":"192","severity":1,"message":"193","line":67,"column":11,"nodeType":"186","endLine":67,"endColumn":67},{"ruleId":"169","severity":1,"message":"194","line":5,"column":13,"nodeType":"171","messageId":"172","endLine":5,"endColumn":16},{"ruleId":"169","severity":1,"message":"195","line":5,"column":18,"nodeType":"171","messageId":"172","endLine":5,"endColumn":25},{"ruleId":"187","severity":1,"message":"188","line":16,"column":15,"nodeType":"186","endLine":16,"endColumn":74},{"ruleId":"180","severity":1,"message":"196","line":22,"column":6,"nodeType":"182","endLine":22,"endColumn":32,"suggestions":"197"},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AuthService' is defined but never used.","'ProjectService' is defined but never used.",["198"],["199"],"'hexadecimal' is assigned a value but never used.","'addContent' is assigned a value but never used.","'addFontAsContent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayRows'. Either include it or remove the dependency array.","ArrayExpression",["200"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'row' is assigned a value but never used.","'slotIdx' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setAuthUser'. Either include it or remove the dependency array.",["201"],"no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [displayRows]",{"range":"206","text":"207"},"Update the dependencies array to be: [setAuthUser, uploadedPicture, user.id]",{"range":"208","text":"209"},[3962,3964],"[displayRows]",[705,731],"[setAuthUser, uploadedPicture, user.id]"]