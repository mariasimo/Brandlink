[{"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js":"1","/Users/mariasimo/SideProjects/Brandlink/client/src/App.js":"2","/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js":"3","/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js":"4","/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js":"5","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js":"6","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js":"7","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js":"8","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js":"9","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js":"10","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js":"11","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js":"12","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js":"13","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js":"14","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js":"15","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js":"16","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js":"17","/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js":"18","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js":"19","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js":"20","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js":"21","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js":"22","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js":"23","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js":"24","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js":"25","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js":"26","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js":"27","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js":"28","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login.js":"29","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup.js":"30","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Profile.js":"31","/Users/mariasimo/SideProjects/Brandlink/client/src/hooks/useSetState.js":"32","/Users/mariasimo/SideProjects/Brandlink/client/src/context/AuthContext.js":"33"},{"size":360,"mtime":1611703341368,"results":"34","hashOfConfig":"35"},{"size":12170,"mtime":1611787817369,"results":"36","hashOfConfig":"35"},{"size":1647,"mtime":1611786979310,"results":"37","hashOfConfig":"35"},{"size":6086,"mtime":1611786985694,"results":"38","hashOfConfig":"35"},{"size":2391,"mtime":1611787696248,"results":"39","hashOfConfig":"35"},{"size":2475,"mtime":1611786964791,"results":"40","hashOfConfig":"35"},{"size":3082,"mtime":1611786960599,"results":"41","hashOfConfig":"35"},{"size":2203,"mtime":1611609614251,"results":"42","hashOfConfig":"35"},{"size":561,"mtime":1611609614252,"results":"43","hashOfConfig":"35"},{"size":3135,"mtime":1611609614248,"results":"44","hashOfConfig":"35"},{"size":4575,"mtime":1611786940921,"results":"45","hashOfConfig":"35"},{"size":3965,"mtime":1611609614248,"results":"46","hashOfConfig":"35"},{"size":2091,"mtime":1611609614249,"results":"47","hashOfConfig":"35"},{"size":2735,"mtime":1611609614249,"results":"48","hashOfConfig":"35"},{"size":2750,"mtime":1611609614249,"results":"49","hashOfConfig":"35"},{"size":7593,"mtime":1611786946419,"results":"50","hashOfConfig":"35"},{"size":1822,"mtime":1611787642792,"results":"51","hashOfConfig":"35"},{"size":6641,"mtime":1611616053049,"results":"52","hashOfConfig":"35"},{"size":835,"mtime":1611609614250,"results":"53","hashOfConfig":"35"},{"size":1147,"mtime":1611609614250,"results":"54","hashOfConfig":"35"},{"size":907,"mtime":1611609614251,"results":"55","hashOfConfig":"35"},{"size":22642,"mtime":1611786952526,"results":"56","hashOfConfig":"35"},{"size":959,"mtime":1611609614250,"results":"57","hashOfConfig":"35"},{"size":1101,"mtime":1611609614253,"results":"58","hashOfConfig":"35"},{"size":2156,"mtime":1611609614252,"results":"59","hashOfConfig":"35"},{"size":2583,"mtime":1611609614253,"results":"60","hashOfConfig":"35"},{"size":1670,"mtime":1611609614253,"results":"61","hashOfConfig":"35"},{"size":1579,"mtime":1611609614252,"results":"62","hashOfConfig":"35"},{"size":5269,"mtime":1611704937084,"results":"63","hashOfConfig":"35"},{"size":2693,"mtime":1611787945494,"results":"64","hashOfConfig":"35"},{"size":2172,"mtime":1611786812515,"results":"65","hashOfConfig":"35"},{"size":376,"mtime":1611701983254,"results":"66","hashOfConfig":"35"},{"size":1119,"mtime":1611786971186,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1wd42be",{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mariasimo/SideProjects/Brandlink/client/src/index.js",[],["141","142"],"/Users/mariasimo/SideProjects/Brandlink/client/src/App.js",["143","144","145","146","147"],"/Users/mariasimo/SideProjects/Brandlink/client/src/services/AuthService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/services/ProjectService.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/guards/PrivateRoute.js",["148"],"import React from \"react\";\nimport { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuthContext } from \"../context/AuthContext\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const { user } = useAuthContext();\n  return (\n    <Route\n      render={(props) =>\n        user.id ? <Component {...props} {...rest} /> : <Redirect to=\"/login\" />\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n\n// export default function PrivateRoute({\n//   component: Component,\n//   // user,\n//   // activeProject,\n//   // colorPalette,\n//   // typeset,\n//   // toggleMenu,\n//   // menuIsOpen,\n//   // addFontLinks,\n//   // redirectPath,\n//   // addColorToPalette,\n//   // saveType,\n//   // deleteColor,\n//   // deleteType,\n//   // assets,\n//   // addAsset,\n//   // onDragStart,\n//   // onDrop,\n//   // deleteAsset,\n//   // setActiveProject,\n//   // textstyles,\n//   // addTextStyle,\n//   // projectTitle,\n//   // createProject,\n//   // shareMessage,\n//   ...rest\n// }) {\n//   return (\n//     <Route\n//       {...rest}\n//       render={(props) => {\n//         console.log(props);\n//         if (\n//           //user\n//           true\n//         ) {\n//           return (\n//             <Component\n//               // loggedInUser={user}\n//               // activeProject={activeProject}\n//               // toggleMenu={toggleMenu}\n//               // menuIsOpen={menuIsOpen}\n//               // colorPalette={colorPalette}\n//               // typeset={typeset}\n//               // addColorToPalette={addColorToPalette}\n//               // deleteColor={deleteColor}\n//               // deleteType={deleteType}\n//               // saveType={saveType}\n//               // assets={assets}\n//               // addAsset={addAsset}\n//               // deleteAsset={deleteAsset}\n//               // onDragStart={onDragStart}\n//               // onDrop={onDrop}\n//               // setActiveProject={setActiveProject}\n//               // textstyles={textstyles}\n//               // addTextStyle={addTextStyle}\n//               // projectTitle = {projectTitle}\n//               // createProject= {createProject}\n//               // shareMessage={shareMessage}\n//               {...rest}\n//               {...props}\n//             />\n//           );\n//         } else {\n//           return <Redirect to=\"/\" />;\n//         }\n//       }}\n//     />\n//   );\n// }\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ProjectList.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/NewProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/EditProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/ReadProject.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/ColorPalette.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewColor.js",["149"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\nimport BrandHeader from \"../layout/BrandHeader\";\nimport SideMenu from \"../layout/SideMenu\";\nimport MainContent from \"../layout/MainContent\";\nimport { TwitterPicker } from \"react-color\";\n\nexport default class NewColor extends Component {\n  constructor(props) {\n    super(props);\n    this.projectService = new ProjectService();\n\n    this.state = {\n      name: \"\",\n      hexadecimal: \"\",\n      colorPalette: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getColorData();\n  }\n\n  getColorData = () => {\n    const { colorId } = this.props.match.params;\n\n    if (colorId !== undefined) {\n      this.projectService.getColorData(colorId).then(\n        (colorData) => {\n          let color = colorData.colorPalette.filter(\n            (color) => color._id === colorId\n          );\n          this.setState({\n            ...this.state,\n            name: color[0].name,\n            hexadecimal: color[0].hexadecimal,\n          });\n        },\n        (error) => {\n          const { message } = error;\n          console.error(message);\n        }\n      );\n    }\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ ...this.state, [name]: value });\n  };\n\n  handleChangeComplete = (color) => {\n    this.setState({ hexadecimal: color.hex });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, hexadecimal } = this.state;\n    const { id, colorId } = this.props.match.params;\n    const { history } = this.props;\n    this.props.addColorToPalette({ name, hexadecimal, id, colorId, history });\n  };\n\n  render() {\n    const { name, hexadecimal } = this.state;\n    const { colorId, id } = this.props.match.params;\n    const { colorPalette, typeset, assets } = this.props;\n\n    return (\n      <>\n        <SideMenu\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n        >\n          {colorId && (\n            <BrandHeader\n              title=\"Edit color\"\n              subtitle=\"Color Palette\"\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n          {!colorId && (\n            <BrandHeader\n              title=\"New color\"\n              subtitle=\"Color Palette\"\n              {...this.props}\n              url={`/project/${id}/edit/colorPalette`}\n            ></BrandHeader>\n          )}\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label htmlFor=\"title\" className=\"label\">\n                Name:\n              </label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  className=\"input\"\n                  value={name}\n                  placeholder=\"Introduce a name for your color\"\n                  onChange={this.handleChange}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"path\" className=\"label\">\n                Hexadecimal:\n              </label>\n              <div className=\"control\">\n                {/* <input\n                type=\"text\"\n                name=\"hexadecimal\"\n                className=\"input\"\n                value={hexadecimal}\n                placeholder=\"Introduce the url for your project\"\n                onChange={this.handleChange}\n                required\n              /> */}\n                <TwitterPicker\n                  color={this.state.background}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </div>\n            </div>\n\n            <div className=\"control\">\n              {!colorId && (\n                <input\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  value=\"Save Color\"\n                ></input>\n              )}\n\n              {colorId && (\n                <input\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  value=\"Edit Color\"\n                ></input>\n              )}\n            </div>\n          </form>\n        </SideMenu>\n        <MainContent\n          {...this.props}\n          toggleMenu={this.props.toggleMenu}\n          menuIsOpen={this.props.menuIsOpen}\n          user={this.props.loggedInUser}\n          colorPalette={colorPalette}\n          typeset={typeset}\n          assets={assets}\n          permissionToEdit\n        ></MainContent>\n      </>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/Assets.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewType.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TypeSet.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/TextStyles.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/brandPresets/NewTextStyle.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Navbar.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/landingPage/LandingPage.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/BrandHeader.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/SideMenu.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/project/Project.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/MainContent.js",["150","151","152"],"import React, { Component } from \"react\";\nimport ProjectService from \"../../services/ProjectService\";\n\n// import { Content } from '../project/Content';\n// import Dropdown from '../utils/Dropdown';\nimport Dropzone from \"react-dropzone\";\nimport TextEditor from \"../utils/TextEditor\";\nimport Dropdown from \"../utils/Dropdown\";\n\nexport default class MainContent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.projectService = new ProjectService();\n    this.loadingImg = \"\";\n    this.loadingParent = \"\";\n  }\n\n  displayRows = () => {\n    const { id } = this.props.match.params;\n\n    this.projectService.displayRows(id).then((projectData) => {\n      const { rows, colorPalette, typeset, textstyles } = projectData;\n      this.setState(\n        {\n          ...this.state,\n          rows: rows,\n          colorPalette: colorPalette,\n          typeset: typeset,\n          textstyles: textstyles,\n        },\n        () => {\n          console.log(this.state.rows);\n        }\n      );\n    });\n  };\n\n  addNewRow = (layout) => {\n    const userId = this.props.user.id;\n    this.projectService.createNewRow({ layout, userId }).then(\n      (projectWithRowAdded) => {\n        this.setState({\n          ...this.state,\n          rows: projectWithRowAdded.rows,\n        });\n      },\n      (error) => console.log(error)\n    );\n  };\n\n  deleteRow = (rowId) => {\n    this.projectService.deleteRow(rowId).then(\n      (project) => {\n        this.displayRows();\n      },\n      (error) => {\n        const { message } = error;\n        console.error(message);\n      }\n    );\n  };\n\n  addContent = (rowId, slotIdx, type) => {\n    this.projectService.addContent({ rowId, slotIdx, type }).then((payload) => {\n      this.displayRows();\n    });\n  };\n\n  addContentFront = (rowId, slotIdx, type) => {\n    this.projectService.fetchContent(rowId).then((payload) => {\n      let content = payload;\n\n      content[slotIdx] = { order: slotIdx, type: type };\n\n      this.projectService\n        .insertSlot(content, rowId)\n        .then((payload) => this.displayRows())\n        .catch((err) => console.log(err));\n    });\n  };\n\n  addFontAsContent = (rowId, slotIdx, type) => {\n    this.projectService\n      .addFontAsContent({ rowId, slotIdx, type })\n      .then((payload) => {\n        console.log(payload);\n        // this.displayRows();\n      });\n  };\n\n  addImageAsContent = (file, rowId, slotIdx, type) => {\n    this.loadingImg = document.createElement(\"img\");\n    this.loadingImg.setAttribute(\"src\", \"/loading.svg\");\n    this.loadingParent = document.querySelector(\".image-label\");\n    this.loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append(\"file\", file[0]);\n\n    this.projectService.addImageAsContent({ uploadData }).then((imageURl) => {\n      let image = imageURl;\n      this.projectService.fetchContent(rowId).then((payload) => {\n        let content = payload;\n        content[slotIdx] = { order: slotIdx, image: image, type: type };\n        this.projectService\n          .insertSlot(content, rowId)\n          .then((payload) => {\n            console.log(payload);\n            this.displayRows();\n          })\n          .catch((err) => console.log(err));\n      });\n    });\n  };\n\n  addDownloadAsContent = (file, rowId, slotIdx, type) => {\n    this.loadingImg = document.createElement(\"img\");\n    this.loadingImg.setAttribute(\"src\", \"/loading.svg\");\n    this.loadingParent = document.querySelector(\".file-label\");\n    this.loadingParent.appendChild(this.loadingImg);\n\n    const uploadData = new FormData();\n    uploadData.append(\"file\", file[0]);\n\n    this.projectService\n      .addDownloadAsContent({ uploadData })\n      .then((assetObject) => {\n        console.log(assetObject);\n        this.projectService.fetchContent(rowId).then((payload) => {\n          let content = payload;\n          content[slotIdx] = { order: slotIdx, asset: assetObject, type: type };\n          this.projectService\n            .insertSlot(content, rowId)\n            .then((payload) => {\n              console.log(payload);\n              this.displayRows();\n            })\n            .catch((err) => console.log(err));\n        });\n      });\n  };\n\n  componentDidMount() {\n    this.displayRows();\n  }\n\n  render() {\n    // const path = this.props.user.activeProject;\n    const path = this.props.match.params.id;\n    const { permissionToEdit } = this.props;\n    const { colorPalette, typeset, textstyles } = this.state;\n\n    return (\n      <div\n        className={`main-content section is-paddingless\t ${this.props.menuIsOpen}`}\n      >\n        <section className=\"section rows-container is-paddingless\t\">\n          {this.state.rows &&\n            this.state.rows.map((row, rowIdx) => (\n              <div key={row._id} className=\"columns is-multiline is-marginless\">\n                {row.slots.map((slot, slotIdx) => (\n                  <div\n                    key={slotIdx}\n                    id={`slot-${rowIdx}-${slotIdx}`}\n                    className={`${row.layout} column row slot`}\n                  >\n                    {row.content[slotIdx].type && (\n                      <React.Fragment>\n                        {row.content[slotIdx].type === \"assets\" && (\n                          <>\n                            {/* {assets && assets.length > 0 && ( */}\n                            <div\n                              className={`assets-container content-container ${\n                                row.content[slotIdx].image ? \"has-image\" : \"\"\n                              }`}\n                            >\n                              {!row.content[slotIdx].image && (\n                                <Dropzone\n                                  onDrop={(acceptedFiles) =>\n                                    this.addImageAsContent(\n                                      acceptedFiles,\n                                      row._id,\n                                      slotIdx,\n                                      \"assets\"\n                                    )\n                                  }\n                                >\n                                  {({ getRootProps, getInputProps }) => (\n                                    <section class=\"image-label\">\n                                      <div {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        <p>Click to select image</p>\n                                      </div>\n                                    </section>\n                                  )}\n                                </Dropzone>\n                              )}\n                              {row.content[slotIdx].image && (\n                                <img src={row.content[slotIdx].image} alt=\"\" />\n                              )}\n                            </div>\n                          </>\n                        )}\n\n                        {row.content[slotIdx].type === \"colorPalette\" && (\n                          <>\n                            {colorPalette && colorPalette.length > 0 && (\n                              <div className=\"color-container content-container\">\n                                {colorPalette.map((color, idx) => (\n                                  <div\n                                    className=\"color\"\n                                    key={idx}\n                                    style={{\n                                      width: 100 / colorPalette.length + \"%\",\n                                      backgroundColor: color.hexadecimal,\n                                    }}\n                                  >\n                                    <span className=\"color-name vertical-text\">\n                                      {color.name}\n                                    </span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n\n                            {!colorPalette.length && (\n                              <div className=\"color-container content-container\">\n                                <div class=\"notification is-info\">\n                                  Add your first color.{\" \"}\n                                  <a\n                                    href={`/project/${path}/edit/colorPalette/new`}\n                                  >\n                                    New color\n                                  </a>\n                                </div>\n                              </div>\n                            )}\n                          </>\n                        )}\n                        {row.content[slotIdx].type === \"typeset\" && (\n                          <>\n                            <div className=\"field has-addons\">\n                              {typeset && typeset.length > 0 && (\n                                <div className=\"typeset-container content-container\">\n                                  {typeset.map((type) => (\n                                    // <p className='control'>\n                                    //   <button\n                                    //     className='button is-small'\n                                    //     onClick={slodIdx =>\n                                    //       this.addFontAsContent(\n                                    //         row._id,\n                                    //         slotIdx,\n                                    //         'typeset'\n                                    //       )\n                                    //     }\n                                    //     style={{ fontFamily: type.fontFamily }}\n                                    //   >\n                                    //     {type.fontFamily}\n                                    //   </button>\n                                    // </p>\n                                    <React.Fragment>\n                                      <div>{type.fontFamily}</div>\n                                      <div\n                                        style={{ fontFamily: type.fontFamily }}\n                                        className=\"is-size-3\"\n                                      >\n                                        Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm\n                                        Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n                                        0123456789 !\"#$%&/()=?´¨@\n                                      </div>\n                                    </React.Fragment>\n                                  ))}\n                                </div>\n                              )}\n                            </div>\n\n                            {!typeset.length && (\n                              <div className=\"typeset-container content-container\">\n                                <div class=\"notification is-info\">\n                                  Add your first type.{\" \"}\n                                  <a href={`/project/${path}/edit/typeset`}>\n                                    New type\n                                  </a>\n                                </div>\n                              </div>\n                            )}\n                          </>\n                        )}\n\n                        {row.content[slotIdx].type === \"textedit\" && (\n                          <div className=\"content-container textedit-container\">\n                            <TextEditor></TextEditor>\n                          </div>\n                        )}\n\n                        {row.content[slotIdx].type === \"textstyles\" && (\n                          <>\n                            {textstyles && (\n                              <div className=\"type-container content-container\">\n                                {textstyles.map((style, idx) => (\n                                  <div\n                                    className=\"type\"\n                                    key={idx}\n                                    style={{\n                                      fontFamily: style.fontFamily,\n                                      fontWeight: style.fontWeight,\n                                      fontSize: `${style.fontSize}rem`,\n                                      letterSpacing: `${style.letterSpacing}rem`,\n                                      lineHeight: style.lineHeight,\n                                    }}\n                                  >\n                                    {style.name}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </>\n                        )}\n\n                        {row.content[slotIdx].type === \"downloads\" && (\n                          <>\n                            {/* {assets && assets.length > 0 && ( */}\n                            <div className=\"download-container content-container\">\n                              {!row.content[slotIdx].asset && (\n                                <Dropzone\n                                  onDrop={(acceptedFiles) =>\n                                    this.addDownloadAsContent(\n                                      acceptedFiles,\n                                      row._id,\n                                      slotIdx,\n                                      \"downloads\"\n                                    )\n                                  }\n                                >\n                                  {({ getRootProps, getInputProps }) => (\n                                    <section class=\"file-label\">\n                                      <div {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        <p>Click to select file</p>\n                                      </div>\n                                    </section>\n                                  )}\n                                </Dropzone>\n                              )}\n                              {row.content[slotIdx].asset && (\n                                // row.content[slotIdx].asset\n                                <a\n                                  className=\"button\"\n                                  href={row.content[slotIdx].asset.secure_url}\n                                  target=\"_blank\"\n                                  download\n                                >\n                                  Download {row.content[slotIdx].asset.name}\n                                </a>\n                              )}\n                            </div>\n                          </>\n                        )}\n                      </React.Fragment>\n                    )}\n\n                    {!row.content[slotIdx].type && (\n                      <React.Fragment>\n                        <div className=\"content-container\">\n                          <div className=\"dropdown is-hoverable\">\n                            <div className=\"dropdown-trigger\">\n                              <button\n                                className=\"button\"\n                                aria-haspopup=\"true\"\n                                aria-controls=\"dropdown-menu4\"\n                              >\n                                <span>Add content</span>\n                                <span className=\"icon is-small\">\n                                  <img\n                                    src={`${process.env.REACT_APP_URL}/chevron-down.svg`}\n                                  ></img>\n                                </span>\n                              </button>\n                            </div>\n                            <div\n                              className=\"dropdown-menu\"\n                              id=\"dropdown-menu4\"\n                              role=\"menu\"\n                            >\n                              <div className=\"dropdown-content\">\n                                <div className=\"dropdown-item\">\n                                  <div>\n                                    <button\n                                      onClick={() =>\n                                        this.addContentFront(\n                                          row._id,\n                                          slotIdx,\n                                          \"textedit\"\n                                        )\n                                      }\n                                      className=\"button\"\n                                    >\n                                      Text editor\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick={() =>\n                                        this.addContentFront(\n                                          row._id,\n                                          slotIdx,\n                                          \"colorPalette\"\n                                        )\n                                      }\n                                      className=\"button\"\n                                    >\n                                      Color Palette\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick={() =>\n                                        this.addContentFront(\n                                          row._id,\n                                          slotIdx,\n                                          \"assets\"\n                                        )\n                                      }\n                                      className=\"button\"\n                                    >\n                                      Image\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick={() =>\n                                        this.addContentFront(\n                                          row._id,\n                                          slotIdx,\n                                          \"typeset\"\n                                        )\n                                      }\n                                      className=\"button\"\n                                    >\n                                      Typography\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick={() =>\n                                        this.addContentFront(\n                                          row._id,\n                                          slotIdx,\n                                          \"textstyles\"\n                                        )\n                                      }\n                                      className=\"button\"\n                                    >\n                                      TextStyles\n                                    </button>\n                                  </div>\n                                  <div>\n                                    <button\n                                      onClick={() =>\n                                        this.addContentFront(\n                                          row._id,\n                                          slotIdx,\n                                          \"downloads\"\n                                        )\n                                      }\n                                      className=\"button\"\n                                    >\n                                      Asset\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </React.Fragment>\n                    )}\n                  </div>\n                ))}\n\n                {permissionToEdit && (\n                  <button\n                    className=\"close\"\n                    onClick={() => this.deleteRow(row._id)}\n                  >\n                    Cerrar\n                  </button>\n                )}\n              </div>\n            ))}\n\n          {permissionToEdit && (\n            <div className=\"column is-full layout-btn-container\">\n              <p className=\"header subtitle is-4 is-primary\">Choose layout</p>\n              <div className=\"inner\">\n                <div\n                  className=\"layout-btn\"\n                  onClick={() => this.addNewRow(\"is-full\")}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/full.svg`}\n                    alt=\"Row\"\n                  ></img>\n                  Full\n                </div>\n\n                <div\n                  className=\"layout-btn\"\n                  onClick={() => this.addNewRow(\"is-half\")}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/half.svg`}\n                    alt=\"Row\"\n                  ></img>\n                  Half\n                </div>\n\n                <div\n                  className=\"layout-btn\"\n                  onClick={() => this.addNewRow(\"is-one-third\")}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/third.svg`}\n                    alt=\"Row\"\n                  ></img>\n                  Third\n                </div>\n\n                <div\n                  className=\"layout-btn\"\n                  onClick={() => this.addNewRow(\"is-two-thirds-first\")}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/two-thirds-first.svg`}\n                    alt=\"Row\"\n                  ></img>\n                  Two Thirds\n                </div>\n\n                <div\n                  className=\"layout-btn\"\n                  onClick={() => this.addNewRow(\"is-two-thirds-last\")}\n                >\n                  <img\n                    src={`${process.env.REACT_APP_URL}/two-thirds-last.svg`}\n                    alt=\"Row\"\n                  ></img>\n                  Two Thirds\n                </div>\n              </div>\n            </div>\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/layout/Hero.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyFontPicker.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/AdobeFontsImporter.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/MyModal.js",["153","154","155"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    minWidth: '500px',\n    minHeight: '250px',\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    padding: \"2em 3em\",\n    transform: 'translate(-40%, -50%)',\n    boxShadow: \"0 0 20px  rgba(60,90,195, 0.4)\"\n  }\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n// Modal.setAppElement('#yourAppElement')\n\nexport default class MyModal extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    // this.subtitle.style.color = '#f00';\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    const projectId = this.props.projectId;\n\n    return (\n      <div>\n        <button className=\"button is-primary is-light is-fullwidth\" onClick={this.openModal}>Share this project</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel='Example Modal'\n        >\n          <div>\n          <a class='delete close-modal' onClick={this.closeModal}></a>\n          <h3 className='title is-4'>Share this Brandlink</h3>\n          <form id='contact-form' onSubmit={this.props.sendMessage} method='POST'>\n            \n            <div class='field is-grouped'>\n              <p class='control is-expanded'>\n                <input\n                class=\"input\"\n                  type='email'\n                  id='email'\n                  aria-describedby='emailHelp'\n                  placeholder='Email'\n                ></input>\n              </p>\n              <input\n              type='hidden'\n              name='projectid'\n              id='projectid'\n              value={projectId}\n            />\n              <p class='control'>\n                <button type=\"submit\" class='button is-info'>Send</button>\n              </p>\n            </div>\n          </form>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/TextEditor.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/utils/Dropdown.js",["156","157","158"],"import React, { Component } from 'react';\n\nexport default class Dropdown extends Component {\n  render() {\n    const { row, slotIdx } = this.props;\n    return (\n      <div className='dropdown is-hoverable'>\n        <div className='dropdown-trigger'>\n          <button\n            className='button'\n            aria-haspopup='true'\n            aria-controls='dropdown-menu4'\n          >\n            <span>Add content</span>\n            <span className='icon is-small'>\n              <img src={`${process.env.REACT_APP_URL}/chevron-down.svg`}></img>\n            </span>\n          </button>\n        </div>\n        <div className='dropdown-menu' id='dropdown-menu4' role='menu'>\n          <div className='dropdown-content'>\n            <div className='dropdown-item'>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Text editor\n                </button>\n              </div>\n              <div>\n                <button\n                  onClick={() => this.props.addContent()}\n                  className='button'\n                >\n                  Color Palette\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Image\n                </button>\n              </div>\n              <div>\n                <button onClick={this.addContent} className='button'>\n                  Typography display\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Login.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Signup.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/components/auth/Profile.js",["159"],"import React, { useEffect, useState } from \"react\";\nimport { useAuthContext } from \"../../context/AuthContext\";\nimport AuthService from \"../../services/AuthService\";\n\nconst authService = new AuthService();\n\nconst Profile = () => {\n  const { user, setAuthUser } = useAuthContext();\n  const [uploadedPicture, setUploadedPicture] = useState();\n  const fallbackPicture = \"https://i.stack.imgur.com/l60Hf.png\";\n\n  useEffect(() => {\n    const updateUser = () => {\n      if (uploadedPicture) {\n        authService\n          .edit({ id: user.id, picture: uploadedPicture })\n          .then((updateUser) => setAuthUser(updateUser));\n      }\n    };\n    updateUser();\n  }, [uploadedPicture, user.id]);\n\n  const handleUpload = (e) => {\n    const uploadData = new FormData();\n    uploadData.append(\"picture\", e.target.files[0]);\n    authService.upload(uploadData).then(\n      (data) => setUploadedPicture(data.secure_url),\n      (error) => console.error(error)\n    );\n  };\n\n  return (\n    <div className=\"column\">\n      <section className=\"section landing\">\n        <div className=\"columns\">\n          <div className=\"column is-one-third\">\n            <div className=\"hero\">\n              <h2 className=\"title is-3\">User details</h2>\n\n              <p>\n                Username: <span className=\"strong\">{user.username}</span>\n                <button className=\"button is-small is-rounded\">\n                  Edit username\n                </button>\n              </p>\n              <p>\n                Password:\n                <button className=\"button is-small is-rounded\">\n                  Edit password\n                </button>\n              </p>\n            </div>\n          </div>\n          <div className=\"column is-two-thirds projects-wrapper\">\n            <div>\n              <div\n                className=\"is-rounded profile-picture\"\n                style={{\n                  backgroundImage: `url(${user.picture || fallbackPicture})`,\n                }}\n              ></div>\n\n              <input type=\"file\" name=\"picture\" onChange={handleUpload}></input>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Profile;\n","/Users/mariasimo/SideProjects/Brandlink/client/src/hooks/useSetState.js",[],"/Users/mariasimo/SideProjects/Brandlink/client/src/context/AuthContext.js",[],{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":24,"column":8,"nodeType":"166","messageId":"167","endLine":24,"endColumn":19},{"ruleId":"164","severity":1,"message":"168","line":63,"column":9,"nodeType":"166","messageId":"167","endLine":63,"endColumn":25},{"ruleId":"164","severity":1,"message":"169","line":87,"column":9,"nodeType":"166","messageId":"167","endLine":87,"endColumn":22},{"ruleId":"164","severity":1,"message":"170","line":238,"column":9,"nodeType":"166","messageId":"167","endLine":238,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":253,"column":6,"nodeType":"173","endLine":253,"endColumn":8,"suggestions":"174"},{"ruleId":"164","severity":1,"message":"175","line":2,"column":10,"nodeType":"166","messageId":"167","endLine":2,"endColumn":19},{"ruleId":"164","severity":1,"message":"176","line":65,"column":19,"nodeType":"166","messageId":"167","endLine":65,"endColumn":30},{"ruleId":"164","severity":1,"message":"177","line":8,"column":8,"nodeType":"166","messageId":"167","endLine":8,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":348,"column":33,"nodeType":"180","endLine":353,"endColumn":34},{"ruleId":"181","severity":1,"message":"182","line":375,"column":35,"nodeType":"180","endLine":377,"endColumn":36},{"ruleId":"164","severity":1,"message":"183","line":2,"column":8,"nodeType":"166","messageId":"167","endLine":2,"endColumn":16},{"ruleId":"184","severity":1,"message":"185","line":67,"column":11,"nodeType":"180","endLine":67,"endColumn":67},{"ruleId":"186","severity":1,"message":"187","line":67,"column":11,"nodeType":"180","endLine":67,"endColumn":67},{"ruleId":"164","severity":1,"message":"188","line":5,"column":13,"nodeType":"166","messageId":"167","endLine":5,"endColumn":16},{"ruleId":"164","severity":1,"message":"189","line":5,"column":18,"nodeType":"166","messageId":"167","endLine":5,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":16,"column":15,"nodeType":"180","endLine":16,"endColumn":74},{"ruleId":"171","severity":1,"message":"190","line":21,"column":6,"nodeType":"173","endLine":21,"endColumn":32,"suggestions":"191"},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'ReadProject' is defined but never used.","Identifier","unusedVar","'setActiveProject' is assigned a value but never used.","'deleteProject' is assigned a value but never used.","'resetForm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authService' and 'setLoggedUser'. Either include them or remove the dependency array.","ArrayExpression",["194"],"'Component' is defined but never used.","'hexadecimal' is assigned a value but never used.","'Dropdown' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'row' is assigned a value but never used.","'slotIdx' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setAuthUser'. Either include it or remove the dependency array.",["195"],"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [authService, setLoggedUser]",{"range":"200","text":"201"},"Update the dependencies array to be: [setAuthUser, uploadedPicture, user.id]",{"range":"202","text":"203"},[7688,7690],"[authService, setLoggedUser]",[662,688],"[setAuthUser, uploadedPicture, user.id]"]